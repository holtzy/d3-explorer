[
  {
    "title": "Geo Projection",
    "repo": "d3-geo-projection",
    "items": [
      {
        "title": "geoAiry"
      },
      {
        "title": "geoAitoff"
      },
      {
        "title": "geoAlbers"
      },
      {
        "title": "geoConicEqualArea"
      },
      {
        "title": "geoArmadillo"
      },
      {
        "title": "geoAugust"
      },
      {
        "title": "geoAzimuthalEqualArea"
      },
      {
        "title": "geoAzimuthalEquidistant"
      },
      {
        "title": "geoBaker"
      },
      {
        "title": "geoBerghaus"
      },
      {
        "title": "geoBertin1953"
      },
      {
        "title": "geoBoggs"
      },
      {
        "title": "geoInterruptedBoggs"
      },
      {
        "title": "geoBonne"
      },
      {
        "title": "geoBottomley"
      },
      {
        "title": "geoBromley"
      },
      {
        "title": "geoMollweide"
      },
      {
        "title": "geoChamberlin"
      },
      {
        "title": "geoChamberlinAfrica"
      },
      {
        "title": "geoCollignon"
      },
      {
        "title": "geoHealpix"
      },
      {
        "title": "geoConicConformal"
      },
      {
        "title": "geoConicEquidistant"
      },
      {
        "title": "geoCraig"
      },
      {
        "title": "geoCraster"
      },
      {
        "title": "geoCylindricalEqualArea"
      },
      {
        "title": "geoCylindricalStereographic"
      },
      {
        "title": "geoEckert1"
      },
      {
        "title": "geoEckert2"
      },
      {
        "title": "geoEckert3"
      },
      {
        "title": "geoEckert4"
      },
      {
        "title": "geoEckert5"
      },
      {
        "title": "geoEckert6"
      },
      {
        "title": "geoEisenlohr"
      },
      {
        "title": "geoEquirectangular"
      },
      {
        "title": "geoFahey"
      },
      {
        "title": "geoFoucaut"
      },
      {
        "title": "geoFoucautSinusoidal"
      },
      {
        "title": "geoGilbert"
      },
      {
        "title": "geoGingery"
      },
      {
        "title": "geoGinzburg4"
      },
      {
        "title": "geoGinzburg5"
      },
      {
        "title": "geoGinzburg6"
      },
      {
        "title": "geoGinzburg8"
      },
      {
        "title": "geoGinzburg9"
      },
      {
        "title": "geoGnomonic"
      },
      {
        "title": "geoGringorten"
      },
      {
        "title": "geoGuyou"
      },
      {
        "title": "geoPeirceQuincuncial"
      },
      {
        "title": "geoHammer"
      },
      {
        "title": "geoHammerRetroazimuthal"
      },
      {
        "title": "geoHill"
      },
      {
        "title": "geoHomolosine"
      },
      {
        "title": "geoInterruptedHomolosine"
      },
      {
        "title": "geoHufnagel"
      },
      {
        "title": "geoHyperelliptical"
      },
      {
        "title": "geoKavrayskiy7"
      },
      {
        "title": "geoLagrange"
      },
      {
        "title": "geoLarrivee"
      },
      {
        "title": "geoLaskowski"
      },
      {
        "title": "geoLittrow"
      },
      {
        "title": "geoLoximuthal"
      },
      {
        "title": "geoMercator"
      },
      {
        "title": "geoMiller"
      },
      {
        "title": "geoModifiedStereographic"
      },
      {
        "title": "geoModifiedStereographicAlaska"
      },
      {
        "title": "geoModifiedStereographicGs48"
      },
      {
        "title": "geoModifiedStereographicGs50"
      },
      {
        "title": "geoModifiedStereographicMiller"
      },
      {
        "title": "geoModifiedStereographicLee"
      },
      {
        "title": "geoMtFlatPolarParabolic"
      },
      {
        "title": "geoMtFlatPolarQuartic"
      },
      {
        "title": "geoMtFlatPolarSinusoidal"
      },
      {
        "title": "geoNaturalEarth1"
      },
      {
        "title": "geoNaturalEarth2"
      },
      {
        "title": "geoNaturalEarth"
      },
      {
        "title": "geoNellHammer"
      },
      {
        "title": "geoNicolosi"
      },
      {
        "title": "geoOrthographic"
      },
      {
        "title": "geoPatterson"
      },
      {
        "title": "geoPolyconic"
      },
      {
        "title": "geoRectangularPolyconic"
      },
      {
        "title": "geoRobinson"
      },
      {
        "title": "geoSatellite"
      },
      {
        "title": "geoSinusoidal"
      },
      {
        "title": "geoSinuMollweide"
      },
      {
        "title": "geoStereographic"
      },
      {
        "title": "geoTimes"
      },
      {
        "title": "geoTransverseMercator"
      },
      {
        "title": "geoTwoPointAzimuthal"
      },
      {
        "title": "geoTwoPointAzimuthalUsa"
      },
      {
        "title": "geoTwoPointEquidistant"
      },
      {
        "title": "geoTwoPointEquidistantUsa"
      },
      {
        "title": "geoVanDerGrinten"
      },
      {
        "title": "geoVanDerGrinten2"
      },
      {
        "title": "geoVanDerGrinten3"
      },
      {
        "title": "geoVanDerGrinten4"
      },
      {
        "title": "geoWagner"
      },
      {
        "title": "geoWagner4"
      },
      {
        "title": "geoWagner6"
      },
      {
        "title": "geoWagner7"
      },
      {
        "title": "geoWiechel"
      },
      {
        "title": "geoWinkel3"
      },
      {
        "title": "geoInterrupt"
      },
      {
        "title": "geoInterruptedSinusoidal"
      },
      {
        "title": "geoInterruptedSinuMollweide"
      },
      {
        "title": "geoInterruptedMollweide"
      },
      {
        "title": "geoInterruptedMollweideHemispheres"
      },
      {
        "title": "geoInterruptedQuarticAuthalic"
      },
      {
        "title": "geoPolyhedral"
      },
      {
        "title": "geoPolyhedralButterfly"
      },
      {
        "title": "geoPolyhedralCollignon"
      },
      {
        "title": "geoPolyhedralWaterman"
      },
      {
        "title": "geoQuincuncial"
      },
      {
        "title": "geoGringortenQuincuncial"
      },
      {
        "title": "geoProject"
      },
      {
        "title": "geoproject"
      },
      {
        "title": "geoStitch"
      },
      {
        "title": "geostitch"
      },
      {
        "title": "geoQuantize"
      }
    ],
    "name": "d3-geo-projection",
    "size": 60393,
    "children": [
      {
        "title": "geoAiry"
      },
      {
        "title": "geoAitoff"
      },
      {
        "title": "geoAlbers"
      },
      {
        "title": "geoConicEqualArea"
      },
      {
        "title": "geoArmadillo"
      },
      {
        "title": "geoAugust"
      },
      {
        "title": "geoAzimuthalEqualArea"
      },
      {
        "title": "geoAzimuthalEquidistant"
      },
      {
        "title": "geoBaker"
      },
      {
        "title": "geoBerghaus"
      },
      {
        "title": "geoBertin1953"
      },
      {
        "title": "geoBoggs"
      },
      {
        "title": "geoInterruptedBoggs"
      },
      {
        "title": "geoBonne"
      },
      {
        "title": "geoBottomley"
      },
      {
        "title": "geoBromley"
      },
      {
        "title": "geoMollweide"
      },
      {
        "title": "geoChamberlin"
      },
      {
        "title": "geoChamberlinAfrica"
      },
      {
        "title": "geoCollignon"
      },
      {
        "title": "geoHealpix"
      },
      {
        "title": "geoConicConformal"
      },
      {
        "title": "geoConicEquidistant"
      },
      {
        "title": "geoCraig"
      },
      {
        "title": "geoCraster"
      },
      {
        "title": "geoCylindricalEqualArea"
      },
      {
        "title": "geoCylindricalStereographic"
      },
      {
        "title": "geoEckert1"
      },
      {
        "title": "geoEckert2"
      },
      {
        "title": "geoEckert3"
      },
      {
        "title": "geoEckert4"
      },
      {
        "title": "geoEckert5"
      },
      {
        "title": "geoEckert6"
      },
      {
        "title": "geoEisenlohr"
      },
      {
        "title": "geoEquirectangular"
      },
      {
        "title": "geoFahey"
      },
      {
        "title": "geoFoucaut"
      },
      {
        "title": "geoFoucautSinusoidal"
      },
      {
        "title": "geoGilbert"
      },
      {
        "title": "geoGingery"
      },
      {
        "title": "geoGinzburg4"
      },
      {
        "title": "geoGinzburg5"
      },
      {
        "title": "geoGinzburg6"
      },
      {
        "title": "geoGinzburg8"
      },
      {
        "title": "geoGinzburg9"
      },
      {
        "title": "geoGnomonic"
      },
      {
        "title": "geoGringorten"
      },
      {
        "title": "geoGuyou"
      },
      {
        "title": "geoPeirceQuincuncial"
      },
      {
        "title": "geoHammer"
      },
      {
        "title": "geoHammerRetroazimuthal"
      },
      {
        "title": "geoHill"
      },
      {
        "title": "geoHomolosine"
      },
      {
        "title": "geoInterruptedHomolosine"
      },
      {
        "title": "geoHufnagel"
      },
      {
        "title": "geoHyperelliptical"
      },
      {
        "title": "geoKavrayskiy7"
      },
      {
        "title": "geoLagrange"
      },
      {
        "title": "geoLarrivee"
      },
      {
        "title": "geoLaskowski"
      },
      {
        "title": "geoLittrow"
      },
      {
        "title": "geoLoximuthal"
      },
      {
        "title": "geoMercator"
      },
      {
        "title": "geoMiller"
      },
      {
        "title": "geoModifiedStereographic"
      },
      {
        "title": "geoModifiedStereographicAlaska"
      },
      {
        "title": "geoModifiedStereographicGs48"
      },
      {
        "title": "geoModifiedStereographicGs50"
      },
      {
        "title": "geoModifiedStereographicMiller"
      },
      {
        "title": "geoModifiedStereographicLee"
      },
      {
        "title": "geoMtFlatPolarParabolic"
      },
      {
        "title": "geoMtFlatPolarQuartic"
      },
      {
        "title": "geoMtFlatPolarSinusoidal"
      },
      {
        "title": "geoNaturalEarth1"
      },
      {
        "title": "geoNaturalEarth2"
      },
      {
        "title": "geoNaturalEarth"
      },
      {
        "title": "geoNellHammer"
      },
      {
        "title": "geoNicolosi"
      },
      {
        "title": "geoOrthographic"
      },
      {
        "title": "geoPatterson"
      },
      {
        "title": "geoPolyconic"
      },
      {
        "title": "geoRectangularPolyconic"
      },
      {
        "title": "geoRobinson"
      },
      {
        "title": "geoSatellite"
      },
      {
        "title": "geoSinusoidal"
      },
      {
        "title": "geoSinuMollweide"
      },
      {
        "title": "geoStereographic"
      },
      {
        "title": "geoTimes"
      },
      {
        "title": "geoTransverseMercator"
      },
      {
        "title": "geoTwoPointAzimuthal"
      },
      {
        "title": "geoTwoPointAzimuthalUsa"
      },
      {
        "title": "geoTwoPointEquidistant"
      },
      {
        "title": "geoTwoPointEquidistantUsa"
      },
      {
        "title": "geoVanDerGrinten"
      },
      {
        "title": "geoVanDerGrinten2"
      },
      {
        "title": "geoVanDerGrinten3"
      },
      {
        "title": "geoVanDerGrinten4"
      },
      {
        "title": "geoWagner"
      },
      {
        "title": "geoWagner4"
      },
      {
        "title": "geoWagner6"
      },
      {
        "title": "geoWagner7"
      },
      {
        "title": "geoWiechel"
      },
      {
        "title": "geoWinkel3"
      },
      {
        "title": "geoInterrupt"
      },
      {
        "title": "geoInterruptedSinusoidal"
      },
      {
        "title": "geoInterruptedSinuMollweide"
      },
      {
        "title": "geoInterruptedMollweide"
      },
      {
        "title": "geoInterruptedMollweideHemispheres"
      },
      {
        "title": "geoInterruptedQuarticAuthalic"
      },
      {
        "title": "geoPolyhedral"
      },
      {
        "title": "geoPolyhedralButterfly"
      },
      {
        "title": "geoPolyhedralCollignon"
      },
      {
        "title": "geoPolyhedralWaterman"
      },
      {
        "title": "geoQuincuncial"
      },
      {
        "title": "geoGringortenQuincuncial"
      },
      {
        "title": "geoProject"
      },
      {
        "title": "geoproject"
      },
      {
        "title": "geoStitch"
      },
      {
        "title": "geostitch"
      },
      {
        "title": "geoQuantize"
      }
    ]
  },
  {
    "title": "Geographies",
    "repo": "d3-geo",
    "items": [
      {
        "title": "d3.geoPath - create a new geographic path generator.",
        "subCategory": "Paths"
      },
      {
        "title": "path - project and render the specified feature.",
        "subCategory": "Paths"
      },
      {
        "title": "path.area - compute the projected planar area of a given feature.",
        "subCategory": "Paths"
      },
      {
        "title": "path.bounds - compute the projected planar bounding box of a given feature.",
        "subCategory": "Paths"
      },
      {
        "title": "path.centroid - compute the projected planar centroid of a given feature.",
        "subCategory": "Paths"
      },
      {
        "title": "path.measure - compute the projected planar length of a given feature.",
        "subCategory": "Paths"
      },
      {
        "title": "path.projection - set the geographic projection.",
        "subCategory": "Paths"
      },
      {
        "title": "path.context - set the render context.",
        "subCategory": "Paths"
      },
      {
        "title": "path.pointRadius - set the radius to display point features.",
        "subCategory": "Paths"
      },
      {
        "title": "projection - project the specified point from the sphere to the plane.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.invert - unproject the specified point from the plane to the sphere.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.stream - wrap the specified stream to project geometry.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.clipAngle - set the radius of the clip circle.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.clipExtent - set the viewport clip extent, in pixels.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.angle - set the post-projection rotation.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.scale - set the scale factor.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.translate - set the translation offset.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.fitExtent - set the scale and translate to fit a GeoJSON object.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.fitSize - set the scale and translate to fit a GeoJSON object.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.fitWidth - set the scale and translate to fit a GeoJSON object.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.fitHeight - set the scale and translate to fit a GeoJSON object.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.center - set the center point.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.rotate - set the three-axis spherical rotation angles.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.precision - set the precision threshold for adaptive sampling.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.preclip - set the spherical clipping stream transform.",
        "subCategory": "Projections"
      },
      {
        "title": "projection.postclip - set the planar clipping stream transform.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoClipCircle - clips spherical geometries to a small circle.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoClipRectangle - clips planar geometries to a rectangular viewport.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAlbers - the Albers equal-area conic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAlbersUsa - a composite Albers projection for the United States.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAzimuthalEqualArea - the azimuthal equal-area projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAzimuthalEquidistant - the azimuthal equidistant projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicConformal - the conic conformal projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicEqualArea - the conic equal-area (Albers) projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicEquidistant - the conic equidistant projection.",
        "subCategory": "Projections"
      },
      {
        "title": "conic.parallels - set the two standard parallels.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoEqualEarth - the Equal Earth projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoEquirectangular - the equirectangular (plate carreé) projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoGnomonic - the gnomonic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoMercator - the spherical Mercator projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoOrthographic - the azimuthal orthographic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoStereographic - the azimuthal stereographic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoTransverseMercator - the transverse spherical Mercator projection.",
        "subCategory": "Projections"
      },
      {
        "title": "project - project the specified point from the sphere to the plane.",
        "subCategory": "Projections"
      },
      {
        "title": "project.invert - unproject the specified point from the plane to the sphere.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoProjection - create a custom projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoProjectionMutator - create a custom configurable projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicConformalRaw - the raw conic conformal projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoConicEquidistantRaw - the raw conic equidistant projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoEquirectangularRaw - the raw equirectangular (plate carreé) projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoGnomonicRaw - the raw gnomonic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoMercatorRaw - the raw Mercator projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoOrthographicRaw - the raw azimuthal orthographic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoStereographicRaw - the raw azimuthal stereographic projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.",
        "subCategory": "Projections"
      },
      {
        "title": "d3.geoArea - compute the spherical area of a given feature.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoBounds - compute the latitude-longitude bounding box for a given feature.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoCentroid - compute the spherical centroid of a given feature.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoContains - test whether a point is inside a given feature.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoDistance - compute the great-arc distance between two points.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoLength - compute the length of a line string or the perimeter of a polygon.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoInterpolate - interpolate between two points along a great arc.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoRotation - create a rotation function for the specified angles.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "rotation - rotate the given point around the sphere.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "rotation.invert - unrotate the given point around the sphere.",
        "subCategory": "Spherical Math"
      },
      {
        "title": "d3.geoCircle - create a circle generator.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "circle - generate a piecewise circle as a Polygon.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "circle.center - specify the circle center in latitude and longitude.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "circle.radius - specify the angular radius in degrees.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "circle.precision - specify the precision of the piecewise circle.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "d3.geoGraticule - create a graticule generator.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule - generate a MultiLineString of meridians and parallels.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.lines - generate an array of LineStrings of meridians and parallels.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.outline - generate a Polygon of the graticule’s extent.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.extent - get or set the major & minor extents.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.extentMajor - get or set the major extent.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.extentMinor - get or set the minor extent.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.step - get or set the major & minor step intervals.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.stepMajor - get or set the major step intervals.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.stepMinor - get or set the minor step intervals.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "graticule.precision - get or set the latitudinal precision.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "d3.geoGraticule10 - generate the default 10° global graticule.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "d3.geoStream - convert a GeoJSON object to a geometry stream.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.point - indicates a point with the specified coordinates.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.lineStart - indicates the start of a line or ring.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.lineEnd - indicates the end of a line or ring.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.polygonStart - indicates the start of a polygon.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.polygonEnd - indicates the end of a polygon.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "stream.sphere - indicates the sphere.",
        "subCategory": "Spherical Shapes"
      },
      {
        "title": "d3.geoIdentity - scale, translate or clip planar geometry.",
        "subCategory": "Transforms"
      },
      {
        "title": "identity.reflectX - reflect the x-dimension.",
        "subCategory": "Transforms"
      },
      {
        "title": "identity.reflectY - reflect the y-dimension.",
        "subCategory": "Transforms"
      },
      {
        "title": "d3.geoTransform - define a custom geometry transform.",
        "subCategory": "Transforms"
      }
    ],
    "name": "d3-geo",
    "size": 35339,
    "children": [
      {
        "name": "d3.geoPath - create a new geographic path generator.",
        "value": 35339
      },
      {
        "name": "path - project and render the specified feature.",
        "value": 35339
      },
      {
        "name": "path.area - compute the projected planar area of a given feature.",
        "value": 35339
      },
      {
        "name": "path.bounds - compute the projected planar bounding box of a given feature.",
        "value": 35339
      },
      {
        "name": "path.centroid - compute the projected planar centroid of a given feature.",
        "value": 35339
      },
      {
        "name": "path.measure - compute the projected planar length of a given feature.",
        "value": 35339
      },
      {
        "name": "path.projection - set the geographic projection.",
        "value": 35339
      },
      {
        "name": "path.context - set the render context.",
        "value": 35339
      },
      {
        "name": "path.pointRadius - set the radius to display point features.",
        "value": 35339
      },
      {
        "name": "projection - project the specified point from the sphere to the plane.",
        "value": 35339
      },
      {
        "name": "projection.invert - unproject the specified point from the plane to the sphere.",
        "value": 35339
      },
      {
        "name": "projection.stream - wrap the specified stream to project geometry.",
        "value": 35339
      },
      {
        "name": "projection.clipAngle - set the radius of the clip circle.",
        "value": 35339
      },
      {
        "name": "projection.clipExtent - set the viewport clip extent, in pixels.",
        "value": 35339
      },
      {
        "name": "projection.angle - set the post-projection rotation.",
        "value": 35339
      },
      {
        "name": "projection.scale - set the scale factor.",
        "value": 35339
      },
      {
        "name": "projection.translate - set the translation offset.",
        "value": 35339
      },
      {
        "name": "projection.fitExtent - set the scale and translate to fit a GeoJSON object.",
        "value": 35339
      },
      {
        "name": "projection.fitSize - set the scale and translate to fit a GeoJSON object.",
        "value": 35339
      },
      {
        "name": "projection.fitWidth - set the scale and translate to fit a GeoJSON object.",
        "value": 35339
      },
      {
        "name": "projection.fitHeight - set the scale and translate to fit a GeoJSON object.",
        "value": 35339
      },
      {
        "name": "projection.center - set the center point.",
        "value": 35339
      },
      {
        "name": "projection.rotate - set the three-axis spherical rotation angles.",
        "value": 35339
      },
      {
        "name": "projection.precision - set the precision threshold for adaptive sampling.",
        "value": 35339
      },
      {
        "name": "projection.preclip - set the spherical clipping stream transform.",
        "value": 35339
      },
      {
        "name": "projection.postclip - set the planar clipping stream transform.",
        "value": 35339
      },
      {
        "name": "d3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.",
        "value": 35339
      },
      {
        "name": "d3.geoClipCircle - clips spherical geometries to a small circle.",
        "value": 35339
      },
      {
        "name": "d3.geoClipRectangle - clips planar geometries to a rectangular viewport.",
        "value": 35339
      },
      {
        "name": "d3.geoAlbers - the Albers equal-area conic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoAlbersUsa - a composite Albers projection for the United States.",
        "value": 35339
      },
      {
        "name": "d3.geoAzimuthalEqualArea - the azimuthal equal-area projection.",
        "value": 35339
      },
      {
        "name": "d3.geoAzimuthalEquidistant - the azimuthal equidistant projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicConformal - the conic conformal projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicEqualArea - the conic equal-area (Albers) projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicEquidistant - the conic equidistant projection.",
        "value": 35339
      },
      {
        "name": "conic.parallels - set the two standard parallels.",
        "value": 35339
      },
      {
        "name": "d3.geoEqualEarth - the Equal Earth projection.",
        "value": 35339
      },
      {
        "name": "d3.geoEquirectangular - the equirectangular (plate carreé) projection.",
        "value": 35339
      },
      {
        "name": "d3.geoGnomonic - the gnomonic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoMercator - the spherical Mercator projection.",
        "value": 35339
      },
      {
        "name": "d3.geoOrthographic - the azimuthal orthographic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoStereographic - the azimuthal stereographic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoTransverseMercator - the transverse spherical Mercator projection.",
        "value": 35339
      },
      {
        "name": "project - project the specified point from the sphere to the plane.",
        "value": 35339
      },
      {
        "name": "project.invert - unproject the specified point from the plane to the sphere.",
        "value": 35339
      },
      {
        "name": "d3.geoProjection - create a custom projection.",
        "value": 35339
      },
      {
        "name": "d3.geoProjectionMutator - create a custom configurable projection.",
        "value": 35339
      },
      {
        "name": "d3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.",
        "value": 35339
      },
      {
        "name": "d3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicConformalRaw - the raw conic conformal projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.",
        "value": 35339
      },
      {
        "name": "d3.geoConicEquidistantRaw - the raw conic equidistant projection.",
        "value": 35339
      },
      {
        "name": "d3.geoEquirectangularRaw - the raw equirectangular (plate carreé) projection.",
        "value": 35339
      },
      {
        "name": "d3.geoGnomonicRaw - the raw gnomonic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoMercatorRaw - the raw Mercator projection.",
        "value": 35339
      },
      {
        "name": "d3.geoOrthographicRaw - the raw azimuthal orthographic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoStereographicRaw - the raw azimuthal stereographic projection.",
        "value": 35339
      },
      {
        "name": "d3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.",
        "value": 35339
      },
      {
        "name": "d3.geoArea - compute the spherical area of a given feature.",
        "value": 35339
      },
      {
        "name": "d3.geoBounds - compute the latitude-longitude bounding box for a given feature.",
        "value": 35339
      },
      {
        "name": "d3.geoCentroid - compute the spherical centroid of a given feature.",
        "value": 35339
      },
      {
        "name": "d3.geoContains - test whether a point is inside a given feature.",
        "value": 35339
      },
      {
        "name": "d3.geoDistance - compute the great-arc distance between two points.",
        "value": 35339
      },
      {
        "name": "d3.geoLength - compute the length of a line string or the perimeter of a polygon.",
        "value": 35339
      },
      {
        "name": "d3.geoInterpolate - interpolate between two points along a great arc.",
        "value": 35339
      },
      {
        "name": "d3.geoRotation - create a rotation function for the specified angles.",
        "value": 35339
      },
      {
        "name": "rotation - rotate the given point around the sphere.",
        "value": 35339
      },
      {
        "name": "rotation.invert - unrotate the given point around the sphere.",
        "value": 35339
      },
      {
        "name": "d3.geoCircle - create a circle generator.",
        "value": 35339
      },
      {
        "name": "circle - generate a piecewise circle as a Polygon.",
        "value": 35339
      },
      {
        "name": "circle.center - specify the circle center in latitude and longitude.",
        "value": 35339
      },
      {
        "name": "circle.radius - specify the angular radius in degrees.",
        "value": 35339
      },
      {
        "name": "circle.precision - specify the precision of the piecewise circle.",
        "value": 35339
      },
      {
        "name": "d3.geoGraticule - create a graticule generator.",
        "value": 35339
      },
      {
        "name": "graticule - generate a MultiLineString of meridians and parallels.",
        "value": 35339
      },
      {
        "name": "graticule.lines - generate an array of LineStrings of meridians and parallels.",
        "value": 35339
      },
      {
        "name": "graticule.outline - generate a Polygon of the graticule’s extent.",
        "value": 35339
      },
      {
        "name": "graticule.extent - get or set the major & minor extents.",
        "value": 35339
      },
      {
        "name": "graticule.extentMajor - get or set the major extent.",
        "value": 35339
      },
      {
        "name": "graticule.extentMinor - get or set the minor extent.",
        "value": 35339
      },
      {
        "name": "graticule.step - get or set the major & minor step intervals.",
        "value": 35339
      },
      {
        "name": "graticule.stepMajor - get or set the major step intervals.",
        "value": 35339
      },
      {
        "name": "graticule.stepMinor - get or set the minor step intervals.",
        "value": 35339
      },
      {
        "name": "graticule.precision - get or set the latitudinal precision.",
        "value": 35339
      },
      {
        "name": "d3.geoGraticule10 - generate the default 10° global graticule.",
        "value": 35339
      },
      {
        "name": "d3.geoStream - convert a GeoJSON object to a geometry stream.",
        "value": 35339
      },
      {
        "name": "stream.point - indicates a point with the specified coordinates.",
        "value": 35339
      },
      {
        "name": "stream.lineStart - indicates the start of a line or ring.",
        "value": 35339
      },
      {
        "name": "stream.lineEnd - indicates the end of a line or ring.",
        "value": 35339
      },
      {
        "name": "stream.polygonStart - indicates the start of a polygon.",
        "value": 35339
      },
      {
        "name": "stream.polygonEnd - indicates the end of a polygon.",
        "value": 35339
      },
      {
        "name": "stream.sphere - indicates the sphere.",
        "value": 35339
      },
      {
        "name": "d3.geoIdentity - scale, translate or clip planar geometry.",
        "value": 35339
      },
      {
        "name": "identity.reflectX - reflect the x-dimension.",
        "value": 35339
      },
      {
        "name": "identity.reflectY - reflect the y-dimension.",
        "value": 35339
      },
      {
        "name": "d3.geoTransform - define a custom geometry transform.",
        "value": 35339
      }
    ]
  },
  {
    "title": "Shapes",
    "repo": "d3-shape",
    "items": [
      {
        "title": "d3.arc - create a new arc generator.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc - generate an arc for the given datum.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.centroid - compute an arc’s midpoint.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.innerRadius - set the inner radius.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.outerRadius - set the outer radius.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.cornerRadius - set the corner radius, for rounded corners.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.startAngle - set the start angle.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.endAngle - set the end angle.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.padAngle - set the angle between adjacent arcs, for padded arcs.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.padRadius - set the radius at which to linearize padding.",
        "subCategory": "Arcs"
      },
      {
        "title": "arc.context - set the rendering context.",
        "subCategory": "Arcs"
      },
      {
        "title": "d3.pie - create a new pie generator.",
        "subCategory": "Pies"
      },
      {
        "title": "pie - compute the arc angles for the given dataset.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.value - set the value accessor.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.sort - set the sort order comparator.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.sortValues - set the sort order comparator.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.startAngle - set the overall start angle.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.endAngle - set the overall end angle.",
        "subCategory": "Pies"
      },
      {
        "title": "pie.padAngle - set the pad angle between adjacent arcs.",
        "subCategory": "Pies"
      },
      {
        "title": "d3.line - create a new line generator.",
        "subCategory": "Lines"
      },
      {
        "title": "line - generate a line for the given dataset.",
        "subCategory": "Lines"
      },
      {
        "title": "line.x - set the x accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "line.y - set the y accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "line.defined - set the defined accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "line.curve - set the curve interpolator.",
        "subCategory": "Lines"
      },
      {
        "title": "line.context - set the rendering context.",
        "subCategory": "Lines"
      },
      {
        "title": "d3.radialLine - create a new radial line generator.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine - generate a line for the given dataset.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine.angle - set the angle accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine.radius - set the radius accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine.defined - set the defined accessor.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine.curve - set the curve interpolator.",
        "subCategory": "Lines"
      },
      {
        "title": "radialLine.context - set the rendering context.",
        "subCategory": "Lines"
      },
      {
        "title": "d3.area - create a new area generator.",
        "subCategory": "Areas"
      },
      {
        "title": "area - generate an area for the given dataset.",
        "subCategory": "Areas"
      },
      {
        "title": "area.x - set the x0 and x1 accessors.",
        "subCategory": "Areas"
      },
      {
        "title": "area.x0 - set the baseline x accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "area.x1 - set the topline x accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "area.y - set the y0 and y1 accessors.",
        "subCategory": "Areas"
      },
      {
        "title": "area.y0 - set the baseline y accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "area.y1 - set the topline y accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "area.defined - set the defined accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "area.curve - set the curve interpolator.",
        "subCategory": "Areas"
      },
      {
        "title": "area.context - set the rendering context.",
        "subCategory": "Areas"
      },
      {
        "title": "area.lineX0 - derive a line for the left edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "area.lineX1 - derive a line for the right edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "area.lineY0 - derive a line for the top edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "area.lineY1 - derive a line for the bottom edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "d3.radialArea - create a new radial area generator.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea - generate an area for the given dataset.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.angle - set the start and end angle accessors.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.startAngle - set the start angle accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.endAngle - set the end angle accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.radius - set the inner and outer radius accessors.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.innerRadius - set the inner radius accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.outerRadius - set the outer radius accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.defined - set the defined accessor.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.curve - set the curve interpolator.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.context - set the rendering context.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.lineStartAngle - derive a line for the start edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.lineEndAngle - derive a line for the end edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.lineInnerRadius - derive a line for the inner edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "radialArea.lineOuterRadius - derive a line for the outer edge of an area.",
        "subCategory": "Areas"
      },
      {
        "title": "d3.curveBasis - a cubic basis spline, repeating the end points.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveBasisClosed - a closed cubic basis spline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveBasisOpen - a cubic basis spline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveBundle - a straightened cubic basis spline.",
        "subCategory": "Curves"
      },
      {
        "title": "bundle.beta - set the bundle tension beta.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCardinalClosed - a closed cubic cardinal spline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCardinalOpen - a cubic cardinal spline.",
        "subCategory": "Curves"
      },
      {
        "title": "cardinal.tension - set the cardinal spline tension.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCatmullRom - a cubic Catmull–Rom spline, with one-sided difference at each end.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCatmullRomClosed - a closed cubic Catmull–Rom spline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveCatmullRomOpen - a cubic Catmull–Rom spline.",
        "subCategory": "Curves"
      },
      {
        "title": "catmullRom.alpha - set the Catmull–Rom parameter alpha.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveLinear - a polyline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveLinearClosed - a closed polyline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveNatural - a natural cubic spline.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveStep - a piecewise constant function.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveStepAfter - a piecewise constant function.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.curveStepBefore - a piecewise constant function.",
        "subCategory": "Curves"
      },
      {
        "title": "curve.areaStart - start a new area segment.",
        "subCategory": "Curves"
      },
      {
        "title": "curve.areaEnd - end the current area segment.",
        "subCategory": "Curves"
      },
      {
        "title": "curve.lineStart - start a new line segment.",
        "subCategory": "Curves"
      },
      {
        "title": "curve.lineEnd - end the current line segment.",
        "subCategory": "Curves"
      },
      {
        "title": "curve.point - add a point to the current line segment.",
        "subCategory": "Curves"
      },
      {
        "title": "d3.linkVertical - create a new vertical link generator.",
        "subCategory": "Links"
      },
      {
        "title": "d3.linkHorizontal - create a new horizontal link generator.",
        "subCategory": "Links"
      },
      {
        "title": "link - generate a link.",
        "subCategory": "Links"
      },
      {
        "title": "link.source - set the source accessor.",
        "subCategory": "Links"
      },
      {
        "title": "link.target - set the target accessor.",
        "subCategory": "Links"
      },
      {
        "title": "link.x - set the point x-accessor.",
        "subCategory": "Links"
      },
      {
        "title": "link.y - set the point y-accessor.",
        "subCategory": "Links"
      },
      {
        "title": "d3.linkRadial - create a new radial link generator.",
        "subCategory": "Links"
      },
      {
        "title": "radialLink.angle - set the point angle accessor.",
        "subCategory": "Links"
      },
      {
        "title": "radialLink.radius - set the point radius accessor.",
        "subCategory": "Links"
      },
      {
        "title": "d3.symbol - create a new symbol generator.",
        "subCategory": "Symbols"
      },
      {
        "title": "symbol - generate a symbol for the given datum.",
        "subCategory": "Symbols"
      },
      {
        "title": "symbol.type - set the symbol type.",
        "subCategory": "Symbols"
      },
      {
        "title": "symbol.size - set the size of the symbol in square pixels.",
        "subCategory": "Symbols"
      },
      {
        "title": "symbol.context - set the rendering context.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbols - the array of built-in symbol types.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolCircle - a circle.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolCross - a Greek cross with arms of equal length.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolDiamond - a rhombus.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolSquare - a square.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolStar - a pentagonal star (pentagram).",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolTriangle - an up-pointing triangle.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.symbolWye - a Y shape.",
        "subCategory": "Symbols"
      },
      {
        "title": "symbolType.draw - draw this symbol to the given context.",
        "subCategory": "Symbols"
      },
      {
        "title": "d3.stack - create a new stack generator.",
        "subCategory": "Stacks"
      },
      {
        "title": "stack - generate a stack for the given dataset.",
        "subCategory": "Stacks"
      },
      {
        "title": "stack.keys - set the keys accessor.",
        "subCategory": "Stacks"
      },
      {
        "title": "stack.value - set the value accessor.",
        "subCategory": "Stacks"
      },
      {
        "title": "stack.order - set the order accessor.",
        "subCategory": "Stacks"
      },
      {
        "title": "stack.offset - set the offset accessor.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOrderAscending - put the smallest series on bottom.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOrderDescending - put the largest series on bottom.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOrderInsideOut - put larger series in the middle.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOrderNone - use the given series order.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOrderReverse - use the reverse of the given series order.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOffsetExpand - normalize the baseline to zero and topline to one.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOffsetDiverging - positive above zero; negative below zero.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOffsetNone - apply a zero baseline.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOffsetSilhouette - center the streamgraph around zero.",
        "subCategory": "Stacks"
      },
      {
        "title": "d3.stackOffsetWiggle - minimize streamgraph wiggling.",
        "subCategory": "Stacks"
      }
    ],
    "name": "d3-shape",
    "size": 28631,
    "children": [
      {
        "name": "d3.arc - create a new arc generator.",
        "value": 28631
      },
      {
        "name": "arc - generate an arc for the given datum.",
        "value": 28631
      },
      {
        "name": "arc.centroid - compute an arc’s midpoint.",
        "value": 28631
      },
      {
        "name": "arc.innerRadius - set the inner radius.",
        "value": 28631
      },
      {
        "name": "arc.outerRadius - set the outer radius.",
        "value": 28631
      },
      {
        "name": "arc.cornerRadius - set the corner radius, for rounded corners.",
        "value": 28631
      },
      {
        "name": "arc.startAngle - set the start angle.",
        "value": 28631
      },
      {
        "name": "arc.endAngle - set the end angle.",
        "value": 28631
      },
      {
        "name": "arc.padAngle - set the angle between adjacent arcs, for padded arcs.",
        "value": 28631
      },
      {
        "name": "arc.padRadius - set the radius at which to linearize padding.",
        "value": 28631
      },
      {
        "name": "arc.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "d3.pie - create a new pie generator.",
        "value": 28631
      },
      {
        "name": "pie - compute the arc angles for the given dataset.",
        "value": 28631
      },
      {
        "name": "pie.value - set the value accessor.",
        "value": 28631
      },
      {
        "name": "pie.sort - set the sort order comparator.",
        "value": 28631
      },
      {
        "name": "pie.sortValues - set the sort order comparator.",
        "value": 28631
      },
      {
        "name": "pie.startAngle - set the overall start angle.",
        "value": 28631
      },
      {
        "name": "pie.endAngle - set the overall end angle.",
        "value": 28631
      },
      {
        "name": "pie.padAngle - set the pad angle between adjacent arcs.",
        "value": 28631
      },
      {
        "name": "d3.line - create a new line generator.",
        "value": 28631
      },
      {
        "name": "line - generate a line for the given dataset.",
        "value": 28631
      },
      {
        "name": "line.x - set the x accessor.",
        "value": 28631
      },
      {
        "name": "line.y - set the y accessor.",
        "value": 28631
      },
      {
        "name": "line.defined - set the defined accessor.",
        "value": 28631
      },
      {
        "name": "line.curve - set the curve interpolator.",
        "value": 28631
      },
      {
        "name": "line.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "d3.radialLine - create a new radial line generator.",
        "value": 28631
      },
      {
        "name": "radialLine - generate a line for the given dataset.",
        "value": 28631
      },
      {
        "name": "radialLine.angle - set the angle accessor.",
        "value": 28631
      },
      {
        "name": "radialLine.radius - set the radius accessor.",
        "value": 28631
      },
      {
        "name": "radialLine.defined - set the defined accessor.",
        "value": 28631
      },
      {
        "name": "radialLine.curve - set the curve interpolator.",
        "value": 28631
      },
      {
        "name": "radialLine.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "d3.area - create a new area generator.",
        "value": 28631
      },
      {
        "name": "area - generate an area for the given dataset.",
        "value": 28631
      },
      {
        "name": "area.x - set the x0 and x1 accessors.",
        "value": 28631
      },
      {
        "name": "area.x0 - set the baseline x accessor.",
        "value": 28631
      },
      {
        "name": "area.x1 - set the topline x accessor.",
        "value": 28631
      },
      {
        "name": "area.y - set the y0 and y1 accessors.",
        "value": 28631
      },
      {
        "name": "area.y0 - set the baseline y accessor.",
        "value": 28631
      },
      {
        "name": "area.y1 - set the topline y accessor.",
        "value": 28631
      },
      {
        "name": "area.defined - set the defined accessor.",
        "value": 28631
      },
      {
        "name": "area.curve - set the curve interpolator.",
        "value": 28631
      },
      {
        "name": "area.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "area.lineX0 - derive a line for the left edge of an area.",
        "value": 28631
      },
      {
        "name": "area.lineX1 - derive a line for the right edge of an area.",
        "value": 28631
      },
      {
        "name": "area.lineY0 - derive a line for the top edge of an area.",
        "value": 28631
      },
      {
        "name": "area.lineY1 - derive a line for the bottom edge of an area.",
        "value": 28631
      },
      {
        "name": "d3.radialArea - create a new radial area generator.",
        "value": 28631
      },
      {
        "name": "radialArea - generate an area for the given dataset.",
        "value": 28631
      },
      {
        "name": "radialArea.angle - set the start and end angle accessors.",
        "value": 28631
      },
      {
        "name": "radialArea.startAngle - set the start angle accessor.",
        "value": 28631
      },
      {
        "name": "radialArea.endAngle - set the end angle accessor.",
        "value": 28631
      },
      {
        "name": "radialArea.radius - set the inner and outer radius accessors.",
        "value": 28631
      },
      {
        "name": "radialArea.innerRadius - set the inner radius accessor.",
        "value": 28631
      },
      {
        "name": "radialArea.outerRadius - set the outer radius accessor.",
        "value": 28631
      },
      {
        "name": "radialArea.defined - set the defined accessor.",
        "value": 28631
      },
      {
        "name": "radialArea.curve - set the curve interpolator.",
        "value": 28631
      },
      {
        "name": "radialArea.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "radialArea.lineStartAngle - derive a line for the start edge of an area.",
        "value": 28631
      },
      {
        "name": "radialArea.lineEndAngle - derive a line for the end edge of an area.",
        "value": 28631
      },
      {
        "name": "radialArea.lineInnerRadius - derive a line for the inner edge of an area.",
        "value": 28631
      },
      {
        "name": "radialArea.lineOuterRadius - derive a line for the outer edge of an area.",
        "value": 28631
      },
      {
        "name": "d3.curveBasis - a cubic basis spline, repeating the end points.",
        "value": 28631
      },
      {
        "name": "d3.curveBasisClosed - a closed cubic basis spline.",
        "value": 28631
      },
      {
        "name": "d3.curveBasisOpen - a cubic basis spline.",
        "value": 28631
      },
      {
        "name": "d3.curveBundle - a straightened cubic basis spline.",
        "value": 28631
      },
      {
        "name": "bundle.beta - set the bundle tension beta.",
        "value": 28631
      },
      {
        "name": "d3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.",
        "value": 28631
      },
      {
        "name": "d3.curveCardinalClosed - a closed cubic cardinal spline.",
        "value": 28631
      },
      {
        "name": "d3.curveCardinalOpen - a cubic cardinal spline.",
        "value": 28631
      },
      {
        "name": "cardinal.tension - set the cardinal spline tension.",
        "value": 28631
      },
      {
        "name": "d3.curveCatmullRom - a cubic Catmull–Rom spline, with one-sided difference at each end.",
        "value": 28631
      },
      {
        "name": "d3.curveCatmullRomClosed - a closed cubic Catmull–Rom spline.",
        "value": 28631
      },
      {
        "name": "d3.curveCatmullRomOpen - a cubic Catmull–Rom spline.",
        "value": 28631
      },
      {
        "name": "catmullRom.alpha - set the Catmull–Rom parameter alpha.",
        "value": 28631
      },
      {
        "name": "d3.curveLinear - a polyline.",
        "value": 28631
      },
      {
        "name": "d3.curveLinearClosed - a closed polyline.",
        "value": 28631
      },
      {
        "name": "d3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.",
        "value": 28631
      },
      {
        "name": "d3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.",
        "value": 28631
      },
      {
        "name": "d3.curveNatural - a natural cubic spline.",
        "value": 28631
      },
      {
        "name": "d3.curveStep - a piecewise constant function.",
        "value": 28631
      },
      {
        "name": "d3.curveStepAfter - a piecewise constant function.",
        "value": 28631
      },
      {
        "name": "d3.curveStepBefore - a piecewise constant function.",
        "value": 28631
      },
      {
        "name": "curve.areaStart - start a new area segment.",
        "value": 28631
      },
      {
        "name": "curve.areaEnd - end the current area segment.",
        "value": 28631
      },
      {
        "name": "curve.lineStart - start a new line segment.",
        "value": 28631
      },
      {
        "name": "curve.lineEnd - end the current line segment.",
        "value": 28631
      },
      {
        "name": "curve.point - add a point to the current line segment.",
        "value": 28631
      },
      {
        "name": "d3.linkVertical - create a new vertical link generator.",
        "value": 28631
      },
      {
        "name": "d3.linkHorizontal - create a new horizontal link generator.",
        "value": 28631
      },
      {
        "name": "link - generate a link.",
        "value": 28631
      },
      {
        "name": "link.source - set the source accessor.",
        "value": 28631
      },
      {
        "name": "link.target - set the target accessor.",
        "value": 28631
      },
      {
        "name": "link.x - set the point x-accessor.",
        "value": 28631
      },
      {
        "name": "link.y - set the point y-accessor.",
        "value": 28631
      },
      {
        "name": "d3.linkRadial - create a new radial link generator.",
        "value": 28631
      },
      {
        "name": "radialLink.angle - set the point angle accessor.",
        "value": 28631
      },
      {
        "name": "radialLink.radius - set the point radius accessor.",
        "value": 28631
      },
      {
        "name": "d3.symbol - create a new symbol generator.",
        "value": 28631
      },
      {
        "name": "symbol - generate a symbol for the given datum.",
        "value": 28631
      },
      {
        "name": "symbol.type - set the symbol type.",
        "value": 28631
      },
      {
        "name": "symbol.size - set the size of the symbol in square pixels.",
        "value": 28631
      },
      {
        "name": "symbol.context - set the rendering context.",
        "value": 28631
      },
      {
        "name": "d3.symbols - the array of built-in symbol types.",
        "value": 28631
      },
      {
        "name": "d3.symbolCircle - a circle.",
        "value": 28631
      },
      {
        "name": "d3.symbolCross - a Greek cross with arms of equal length.",
        "value": 28631
      },
      {
        "name": "d3.symbolDiamond - a rhombus.",
        "value": 28631
      },
      {
        "name": "d3.symbolSquare - a square.",
        "value": 28631
      },
      {
        "name": "d3.symbolStar - a pentagonal star (pentagram).",
        "value": 28631
      },
      {
        "name": "d3.symbolTriangle - an up-pointing triangle.",
        "value": 28631
      },
      {
        "name": "d3.symbolWye - a Y shape.",
        "value": 28631
      },
      {
        "name": "symbolType.draw - draw this symbol to the given context.",
        "value": 28631
      },
      {
        "name": "d3.stack - create a new stack generator.",
        "value": 28631
      },
      {
        "name": "stack - generate a stack for the given dataset.",
        "value": 28631
      },
      {
        "name": "stack.keys - set the keys accessor.",
        "value": 28631
      },
      {
        "name": "stack.value - set the value accessor.",
        "value": 28631
      },
      {
        "name": "stack.order - set the order accessor.",
        "value": 28631
      },
      {
        "name": "stack.offset - set the offset accessor.",
        "value": 28631
      },
      {
        "name": "d3.stackOrderAscending - put the smallest series on bottom.",
        "value": 28631
      },
      {
        "name": "d3.stackOrderDescending - put the largest series on bottom.",
        "value": 28631
      },
      {
        "name": "d3.stackOrderInsideOut - put larger series in the middle.",
        "value": 28631
      },
      {
        "name": "d3.stackOrderNone - use the given series order.",
        "value": 28631
      },
      {
        "name": "d3.stackOrderReverse - use the reverse of the given series order.",
        "value": 28631
      },
      {
        "name": "d3.stackOffsetExpand - normalize the baseline to zero and topline to one.",
        "value": 28631
      },
      {
        "name": "d3.stackOffsetDiverging - positive above zero; negative below zero.",
        "value": 28631
      },
      {
        "name": "d3.stackOffsetNone - apply a zero baseline.",
        "value": 28631
      },
      {
        "name": "d3.stackOffsetSilhouette - center the streamgraph around zero.",
        "value": 28631
      },
      {
        "name": "d3.stackOffsetWiggle - minimize streamgraph wiggling.",
        "value": 28631
      }
    ]
  },
  {
    "title": "Color Schemes",
    "repo": "d3-scale-chromatic",
    "items": [
      {
        "title": "d3.schemeCategory10 -",
        "subCategory": "Categorical",
        "numColors": 10
      },
      {
        "title": "d3.schemeAccent -",
        "subCategory": "Categorical",
        "numColors": 8
      },
      {
        "title": "d3.schemeDark2 -",
        "subCategory": "Categorical",
        "numColors": 8
      },
      {
        "title": "d3.schemePaired -",
        "subCategory": "Categorical",
        "numColors": 12
      },
      {
        "title": "d3.schemePastel1 -",
        "subCategory": "Categorical",
        "numColors": 9
      },
      {
        "title": "d3.schemePastel2 -",
        "subCategory": "Categorical",
        "numColors": 8
      },
      {
        "title": "d3.schemeSet1 -",
        "subCategory": "Categorical",
        "numColors": 9
      },
      {
        "title": "d3.schemeSet2 -",
        "subCategory": "Categorical",
        "numColors": 8
      },
      {
        "title": "d3.schemeSet3 -",
        "subCategory": "Categorical",
        "numColors": 12
      },
      {
        "title": "d3.interpolateBrBG -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolatePiYG -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolatePRGn -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolatePuOr -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateRdBu -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateRdGy -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateRdYlBu -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateRdYlGn -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateSpectral -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeBrBG -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemePiYG -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemePRGn -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemePuOr -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeRdBu -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeRdGy -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeRdYlBu -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeRdYlGn -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.schemeSpectral -",
        "subCategory": "Diverging"
      },
      {
        "title": "d3.interpolateBlues -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolateGreens -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolateGreys -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolateOranges -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolatePurples -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolateReds -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemeBlues -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemeGreens -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemeGreys -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemeOranges -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemePurples -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.schemeReds -",
        "subCategory": "Sequential (Single Hue)"
      },
      {
        "title": "d3.interpolateBuGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateBuPu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateCool -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateCubehelixDefault -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateGnBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateInferno -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateMagma -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateOrRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolatePlasma -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolatePuBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolatePuBuGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolatePuRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateRdPu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateTurbo -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateViridis -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateWarm -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateYlGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateYlGnBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateYlOrBr -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateYlOrRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeBuGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeBuPu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeGnBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeOrRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemePuBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemePuBuGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemePuRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeRdPu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeYlGn -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeYlGnBu -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeYlOrBr -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.schemeYlOrRd -",
        "subCategory": "Sequential (Multi-Hue)"
      },
      {
        "title": "d3.interpolateRainbow - the “less-angry” rainbow",
        "subCategory": "Cyclical"
      },
      {
        "title": "d3.interpolateSinebow - the “sinebow” smooth rainbow",
        "subCategory": "Cyclical"
      }
    ],
    "name": "d3-scale-chromatic",
    "size": 18948,
    "children": [
      {
        "name": "d3.schemeCategory10 -",
        "value": 18948
      },
      {
        "name": "d3.schemeAccent -",
        "value": 18948
      },
      {
        "name": "d3.schemeDark2 -",
        "value": 18948
      },
      {
        "name": "d3.schemePaired -",
        "value": 18948
      },
      {
        "name": "d3.schemePastel1 -",
        "value": 18948
      },
      {
        "name": "d3.schemePastel2 -",
        "value": 18948
      },
      {
        "name": "d3.schemeSet1 -",
        "value": 18948
      },
      {
        "name": "d3.schemeSet2 -",
        "value": 18948
      },
      {
        "name": "d3.schemeSet3 -",
        "value": 18948
      },
      {
        "name": "d3.interpolateBrBG -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePiYG -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePRGn -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePuOr -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRdBu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRdGy -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRdYlBu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRdYlGn -",
        "value": 18948
      },
      {
        "name": "d3.interpolateSpectral -",
        "value": 18948
      },
      {
        "name": "d3.schemeBrBG -",
        "value": 18948
      },
      {
        "name": "d3.schemePiYG -",
        "value": 18948
      },
      {
        "name": "d3.schemePRGn -",
        "value": 18948
      },
      {
        "name": "d3.schemePuOr -",
        "value": 18948
      },
      {
        "name": "d3.schemeRdBu -",
        "value": 18948
      },
      {
        "name": "d3.schemeRdGy -",
        "value": 18948
      },
      {
        "name": "d3.schemeRdYlBu -",
        "value": 18948
      },
      {
        "name": "d3.schemeRdYlGn -",
        "value": 18948
      },
      {
        "name": "d3.schemeSpectral -",
        "value": 18948
      },
      {
        "name": "d3.interpolateBlues -",
        "value": 18948
      },
      {
        "name": "d3.interpolateGreens -",
        "value": 18948
      },
      {
        "name": "d3.interpolateGreys -",
        "value": 18948
      },
      {
        "name": "d3.interpolateOranges -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePurples -",
        "value": 18948
      },
      {
        "name": "d3.interpolateReds -",
        "value": 18948
      },
      {
        "name": "d3.schemeBlues -",
        "value": 18948
      },
      {
        "name": "d3.schemeGreens -",
        "value": 18948
      },
      {
        "name": "d3.schemeGreys -",
        "value": 18948
      },
      {
        "name": "d3.schemeOranges -",
        "value": 18948
      },
      {
        "name": "d3.schemePurples -",
        "value": 18948
      },
      {
        "name": "d3.schemeReds -",
        "value": 18948
      },
      {
        "name": "d3.interpolateBuGn -",
        "value": 18948
      },
      {
        "name": "d3.interpolateBuPu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateCool -",
        "value": 18948
      },
      {
        "name": "d3.interpolateCubehelixDefault -",
        "value": 18948
      },
      {
        "name": "d3.interpolateGnBu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateInferno -",
        "value": 18948
      },
      {
        "name": "d3.interpolateMagma -",
        "value": 18948
      },
      {
        "name": "d3.interpolateOrRd -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePlasma -",
        "value": 18948
      },
      {
        "name": "d3.interpolateCividis -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePuBu -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePuBuGn -",
        "value": 18948
      },
      {
        "name": "d3.interpolatePuRd -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRdPu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateTurbo -",
        "value": 18948
      },
      {
        "name": "d3.interpolateViridis -",
        "value": 18948
      },
      {
        "name": "d3.interpolateWarm -",
        "value": 18948
      },
      {
        "name": "d3.interpolateYlGn -",
        "value": 18948
      },
      {
        "name": "d3.interpolateYlGnBu -",
        "value": 18948
      },
      {
        "name": "d3.interpolateYlOrBr -",
        "value": 18948
      },
      {
        "name": "d3.interpolateYlOrRd -",
        "value": 18948
      },
      {
        "name": "d3.schemeBuGn -",
        "value": 18948
      },
      {
        "name": "d3.schemeBuPu -",
        "value": 18948
      },
      {
        "name": "d3.schemeGnBu -",
        "value": 18948
      },
      {
        "name": "d3.schemeOrRd -",
        "value": 18948
      },
      {
        "name": "d3.schemePuBu -",
        "value": 18948
      },
      {
        "name": "d3.schemePuBuGn -",
        "value": 18948
      },
      {
        "name": "d3.schemePuRd -",
        "value": 18948
      },
      {
        "name": "d3.schemeRdPu -",
        "value": 18948
      },
      {
        "name": "d3.schemeYlGn -",
        "value": 18948
      },
      {
        "name": "d3.schemeYlGnBu -",
        "value": 18948
      },
      {
        "name": "d3.schemeYlOrBr -",
        "value": 18948
      },
      {
        "name": "d3.schemeYlOrRd -",
        "value": 18948
      },
      {
        "name": "d3.interpolateRainbow - the “less-angry” rainbow",
        "value": 18948
      },
      {
        "name": "d3.interpolateSinebow - the “sinebow” smooth rainbow",
        "value": 18948
      }
    ]
  },
  {
    "title": "Scales",
    "repo": "d3-scale",
    "items": [
      {
        "title": "continuous - compute the range value corresponding to a given domain value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.invert - compute the domain value corresponding to a given range value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.domain - set the input domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.range - set the output range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.rangeRound - set the output range and enable rounding.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.clamp - enable clamping to the domain or range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.interpolate - set the output interpolator.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.ticks - compute representative values from the domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.tickFormat - format ticks for human consumption.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.nice - extend the domain to nice round numbers.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "continuous.copy - create a copy of this scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleLinear - create a quantitative linear scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scalePow - create a quantitative power scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow - compute the range value corresponding to a given domain value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.invert - compute the domain value corresponding to a given range value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.exponent - set the power exponent.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.domain - set the input domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.range - set the output range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.rangeRound - set the output range and enable rounding.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.clamp - enable clamping to the domain or range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.interpolate - set the output interpolator.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.ticks - compute representative values from the domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.tickFormat - format ticks for human consumption.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.nice - extend the domain to nice round numbers.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "pow.copy - create a copy of this scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleSqrt - create a quantitative power scale with exponent 0.5.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleLog - create a quantitative logarithmic scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log - compute the range value corresponding to a given domain value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.invert - compute the domain value corresponding to a given range value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.base - set the logarithm base.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.domain - set the input domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.range - set the output range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.rangeRound - set the output range and enable rounding.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.clamp - enable clamping to the domain or range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.interpolate - set the output interpolator.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.ticks - compute representative values from the domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.tickFormat - format ticks for human consumption.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.nice - extend the domain to nice round numbers.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "log.copy - create a copy of this scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleIdentity - create a quantitative identity scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleTime - create a linear scale for time.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time - compute the range value corresponding to a given domain value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.invert - compute the domain value corresponding to a given range value.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.domain - set the input domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.range - set the output range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.rangeRound - set the output range and enable rounding.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.clamp - enable clamping to the domain or range.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.interpolate - set the output interpolator.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.ticks - compute representative values from the domain.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.tickFormat - format ticks for human consumption.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.nice - extend the domain to nice round times.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "time.copy - create a copy of this scale.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleUtc - create a linear scale for UTC.",
        "subCategory": "Continuous Scales"
      },
      {
        "title": "d3.scaleSequential - create a sequential scale.",
        "subCategory": "Sequential Scales"
      },
      {
        "title": "sequential.interpolator - set the scale’s output interpolator.",
        "subCategory": "Sequential Scales"
      },
      {
        "title": "d3.scaleDiverging - create a diverging scale.",
        "subCategory": "Diverging Scales"
      },
      {
        "title": "diverging.interpolator - set the scale’s output interpolator.",
        "subCategory": "Diverging Scales"
      },
      {
        "title": "d3.scaleQuantize - create a uniform quantizing linear scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize - compute the range value corresponding to a given domain value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.invertExtent - compute the domain values corresponding to a given range value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.domain - set the input domain.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.range - set the output range.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.nice - extend the domain to nice round numbers.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.ticks - compute representative values from the domain.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.tickFormat - format ticks for human consumption.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantize.copy - create a copy of this scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "d3.scaleQuantile - create a quantile quantizing linear scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile - compute the range value corresponding to a given domain value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile.invertExtent - compute the domain values corresponding to a given range value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile.domain - set the input domain.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile.range - set the output range.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile.quantiles - get the quantile thresholds.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "quantile.copy - create a copy of this scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "d3.scaleThreshold - create an arbitrary quantizing linear scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "threshold - compute the range value corresponding to a given domain value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "threshold.invertExtent - compute the domain values corresponding to a given range value.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "threshold.domain - set the input domain.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "threshold.range - set the output range.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "threshold.copy - create a copy of this scale.",
        "subCategory": "Quantize Scales"
      },
      {
        "title": "d3.scaleOrdinal - create an ordinal scale.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "ordinal - compute the range value corresponding to a given domain value.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "ordinal.domain - set the input domain.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "ordinal.range - set the output range.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "ordinal.unknown - set the output value for unknown inputs.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "ordinal.copy - create a copy of this scale.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "d3.scaleImplicit - a special unknown value for implicit domains.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "d3.scaleBand - create an ordinal band scale.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band - compute the band start corresponding to a given domain value.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.domain - set the input domain.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.range - set the output range.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.rangeRound - set the output range and enable rounding.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.round - enable rounding.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.paddingInner - set padding between bands.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.paddingOuter - set padding outside the first and last bands.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.padding - set padding outside and between bands.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.align - set band alignment, if there is extra space.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.bandwidth - get the width of each band.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.step - get the distance between the starts of adjacent bands.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "band.copy - create a copy of this scale.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "d3.scalePoint - create an ordinal point scale.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point - compute the point corresponding to a given domain value.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.domain - set the input domain.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.range - set the output range.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.rangeRound - set the output range and enable rounding.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.round - enable rounding.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.padding - set padding outside the first and last point.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.align - set point alignment, if there is extra space.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.bandwidth - returns zero.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.step - get the distance between the starts of adjacent points.",
        "subCategory": "Ordinal Scales"
      },
      {
        "title": "point.copy - create a copy of this scale.",
        "subCategory": "Ordinal Scales"
      }
    ],
    "name": "d3-scale",
    "size": 14841,
    "children": [
      {
        "name": "continuous - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "continuous.invert - compute the domain value corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "continuous.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "continuous.range - set the output range.",
        "value": 14841
      },
      {
        "name": "continuous.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "continuous.clamp - enable clamping to the domain or range.",
        "value": 14841
      },
      {
        "name": "continuous.interpolate - set the output interpolator.",
        "value": 14841
      },
      {
        "name": "continuous.ticks - compute representative values from the domain.",
        "value": 14841
      },
      {
        "name": "continuous.tickFormat - format ticks for human consumption.",
        "value": 14841
      },
      {
        "name": "continuous.nice - extend the domain to nice round numbers.",
        "value": 14841
      },
      {
        "name": "continuous.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleLinear - create a quantitative linear scale.",
        "value": 14841
      },
      {
        "name": "d3.scalePow - create a quantitative power scale.",
        "value": 14841
      },
      {
        "name": "pow - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "pow.invert - compute the domain value corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "pow.exponent - set the power exponent.",
        "value": 14841
      },
      {
        "name": "pow.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "pow.range - set the output range.",
        "value": 14841
      },
      {
        "name": "pow.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "pow.clamp - enable clamping to the domain or range.",
        "value": 14841
      },
      {
        "name": "pow.interpolate - set the output interpolator.",
        "value": 14841
      },
      {
        "name": "pow.ticks - compute representative values from the domain.",
        "value": 14841
      },
      {
        "name": "pow.tickFormat - format ticks for human consumption.",
        "value": 14841
      },
      {
        "name": "pow.nice - extend the domain to nice round numbers.",
        "value": 14841
      },
      {
        "name": "pow.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleSqrt - create a quantitative power scale with exponent 0.5.",
        "value": 14841
      },
      {
        "name": "d3.scaleLog - create a quantitative logarithmic scale.",
        "value": 14841
      },
      {
        "name": "log - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "log.invert - compute the domain value corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "log.base - set the logarithm base.",
        "value": 14841
      },
      {
        "name": "log.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "log.range - set the output range.",
        "value": 14841
      },
      {
        "name": "log.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "log.clamp - enable clamping to the domain or range.",
        "value": 14841
      },
      {
        "name": "log.interpolate - set the output interpolator.",
        "value": 14841
      },
      {
        "name": "log.ticks - compute representative values from the domain.",
        "value": 14841
      },
      {
        "name": "log.tickFormat - format ticks for human consumption.",
        "value": 14841
      },
      {
        "name": "log.nice - extend the domain to nice round numbers.",
        "value": 14841
      },
      {
        "name": "log.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleIdentity - create a quantitative identity scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleTime - create a linear scale for time.",
        "value": 14841
      },
      {
        "name": "time - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "time.invert - compute the domain value corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "time.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "time.range - set the output range.",
        "value": 14841
      },
      {
        "name": "time.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "time.clamp - enable clamping to the domain or range.",
        "value": 14841
      },
      {
        "name": "time.interpolate - set the output interpolator.",
        "value": 14841
      },
      {
        "name": "time.ticks - compute representative values from the domain.",
        "value": 14841
      },
      {
        "name": "time.tickFormat - format ticks for human consumption.",
        "value": 14841
      },
      {
        "name": "time.nice - extend the domain to nice round times.",
        "value": 14841
      },
      {
        "name": "time.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleUtc - create a linear scale for UTC.",
        "value": 14841
      },
      {
        "name": "d3.scaleSequential - create a sequential scale.",
        "value": 14841
      },
      {
        "name": "sequential.interpolator - set the scale’s output interpolator.",
        "value": 14841
      },
      {
        "name": "d3.scaleDiverging - create a diverging scale.",
        "value": 14841
      },
      {
        "name": "diverging.interpolator - set the scale’s output interpolator.",
        "value": 14841
      },
      {
        "name": "d3.scaleQuantize - create a uniform quantizing linear scale.",
        "value": 14841
      },
      {
        "name": "quantize - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "quantize.invertExtent - compute the domain values corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "quantize.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "quantize.range - set the output range.",
        "value": 14841
      },
      {
        "name": "quantize.nice - extend the domain to nice round numbers.",
        "value": 14841
      },
      {
        "name": "quantize.ticks - compute representative values from the domain.",
        "value": 14841
      },
      {
        "name": "quantize.tickFormat - format ticks for human consumption.",
        "value": 14841
      },
      {
        "name": "quantize.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleQuantile - create a quantile quantizing linear scale.",
        "value": 14841
      },
      {
        "name": "quantile - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "quantile.invertExtent - compute the domain values corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "quantile.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "quantile.range - set the output range.",
        "value": 14841
      },
      {
        "name": "quantile.quantiles - get the quantile thresholds.",
        "value": 14841
      },
      {
        "name": "quantile.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleThreshold - create an arbitrary quantizing linear scale.",
        "value": 14841
      },
      {
        "name": "threshold - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "threshold.invertExtent - compute the domain values corresponding to a given range value.",
        "value": 14841
      },
      {
        "name": "threshold.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "threshold.range - set the output range.",
        "value": 14841
      },
      {
        "name": "threshold.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleOrdinal - create an ordinal scale.",
        "value": 14841
      },
      {
        "name": "ordinal - compute the range value corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "ordinal.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "ordinal.range - set the output range.",
        "value": 14841
      },
      {
        "name": "ordinal.unknown - set the output value for unknown inputs.",
        "value": 14841
      },
      {
        "name": "ordinal.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scaleImplicit - a special unknown value for implicit domains.",
        "value": 14841
      },
      {
        "name": "d3.scaleBand - create an ordinal band scale.",
        "value": 14841
      },
      {
        "name": "band - compute the band start corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "band.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "band.range - set the output range.",
        "value": 14841
      },
      {
        "name": "band.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "band.round - enable rounding.",
        "value": 14841
      },
      {
        "name": "band.paddingInner - set padding between bands.",
        "value": 14841
      },
      {
        "name": "band.paddingOuter - set padding outside the first and last bands.",
        "value": 14841
      },
      {
        "name": "band.padding - set padding outside and between bands.",
        "value": 14841
      },
      {
        "name": "band.align - set band alignment, if there is extra space.",
        "value": 14841
      },
      {
        "name": "band.bandwidth - get the width of each band.",
        "value": 14841
      },
      {
        "name": "band.step - get the distance between the starts of adjacent bands.",
        "value": 14841
      },
      {
        "name": "band.copy - create a copy of this scale.",
        "value": 14841
      },
      {
        "name": "d3.scalePoint - create an ordinal point scale.",
        "value": 14841
      },
      {
        "name": "point - compute the point corresponding to a given domain value.",
        "value": 14841
      },
      {
        "name": "point.domain - set the input domain.",
        "value": 14841
      },
      {
        "name": "point.range - set the output range.",
        "value": 14841
      },
      {
        "name": "point.rangeRound - set the output range and enable rounding.",
        "value": 14841
      },
      {
        "name": "point.round - enable rounding.",
        "value": 14841
      },
      {
        "name": "point.padding - set padding outside the first and last point.",
        "value": 14841
      },
      {
        "name": "point.align - set point alignment, if there is extra space.",
        "value": 14841
      },
      {
        "name": "point.bandwidth - returns zero.",
        "value": 14841
      },
      {
        "name": "point.step - get the distance between the starts of adjacent points.",
        "value": 14841
      },
      {
        "name": "point.copy - create a copy of this scale.",
        "value": 14841
      }
    ]
  },
  {
    "title": "Hierarchies",
    "repo": "d3-hierarchy",
    "items": [
      {
        "title": "d3.hierarchy - constructs a root node from hierarchical data.",
        "subCategory": null
      },
      {
        "title": "node.ancestors - generate an array of ancestors.",
        "subCategory": null
      },
      {
        "title": "node.descendants - generate an array of descendants.",
        "subCategory": null
      },
      {
        "title": "node.leaves - generate an array of leaves.",
        "subCategory": null
      },
      {
        "title": "node.path - generate the shortest path to another node.",
        "subCategory": null
      },
      {
        "title": "node.links - generate an array of links.",
        "subCategory": null
      },
      {
        "title": "node.sum - evaluate and aggregate quantitative values.",
        "subCategory": null
      },
      {
        "title": "node.sort - sort all descendant siblings.",
        "subCategory": null
      },
      {
        "title": "node.count - count the number of leaves.",
        "subCategory": null
      },
      {
        "title": "node.each - breadth-first traversal.",
        "subCategory": null
      },
      {
        "title": "node.eachAfter - post-order traversal.",
        "subCategory": null
      },
      {
        "title": "node.eachBefore - pre-order traversal.",
        "subCategory": null
      },
      {
        "title": "node.copy - copy a hierarchy.",
        "subCategory": null
      },
      {
        "title": "d3.stratify - create a new stratify operator.",
        "subCategory": null
      },
      {
        "title": "stratify - construct a root node from tabular data.",
        "subCategory": null
      },
      {
        "title": "stratify.id - set the node id accessor.",
        "subCategory": null
      },
      {
        "title": "stratify.parentId - set the parent node id accessor.",
        "subCategory": null
      },
      {
        "title": "d3.cluster - create a new cluster (dendrogram) layout.",
        "subCategory": null
      },
      {
        "title": "cluster - layout the specified hierarchy in a dendrogram.",
        "subCategory": null
      },
      {
        "title": "cluster.size - set the layout size.",
        "subCategory": null
      },
      {
        "title": "cluster.nodeSize - set the node size.",
        "subCategory": null
      },
      {
        "title": "cluster.separation - set the separation between leaves.",
        "subCategory": null
      },
      {
        "title": "d3.tree - create a new tidy tree layout.",
        "subCategory": null
      },
      {
        "title": "tree - layout the specified hierarchy in a tidy tree.",
        "subCategory": null
      },
      {
        "title": "tree.size - set the layout size.",
        "subCategory": null
      },
      {
        "title": "tree.nodeSize - set the node size.",
        "subCategory": null
      },
      {
        "title": "tree.separation - set the separation between nodes.",
        "subCategory": null
      },
      {
        "title": "d3.treemap - create a new treemap layout.",
        "subCategory": null
      },
      {
        "title": "treemap - layout the specified hierarchy as a treemap.",
        "subCategory": null
      },
      {
        "title": "treemap.tile - set the tiling method.",
        "subCategory": null
      },
      {
        "title": "treemap.size - set the layout size.",
        "subCategory": null
      },
      {
        "title": "treemap.round - set whether the output coordinates are rounded.",
        "subCategory": null
      },
      {
        "title": "treemap.padding - set the padding.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingInner - set the padding between siblings.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingOuter - set the padding between parent and children.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingTop - set the padding between the parent’s top edge and children.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingRight - set the padding between the parent’s right edge and children.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingBottom - set the padding between the parent’s bottom edge and children.",
        "subCategory": null
      },
      {
        "title": "treemap.paddingLeft - set the padding between the parent’s left edge and children.",
        "subCategory": null
      },
      {
        "title": "d3.treemapBinary - tile using a balanced binary tree.",
        "subCategory": null
      },
      {
        "title": "d3.treemapDice - tile into a horizontal row.",
        "subCategory": null
      },
      {
        "title": "d3.treemapSlice - tile into a vertical column.",
        "subCategory": null
      },
      {
        "title": "d3.treemapSliceDice - alternate between slicing and dicing.",
        "subCategory": null
      },
      {
        "title": "d3.treemapSquarify - tile using squarified rows per Bruls et. al.",
        "subCategory": null
      },
      {
        "title": "d3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.",
        "subCategory": null
      },
      {
        "title": "squarify.ratio - set the desired rectangle aspect ratio.",
        "subCategory": null
      },
      {
        "title": "d3.partition - create a new partition (icicle or sunburst) layout.",
        "subCategory": null
      },
      {
        "title": "partition - layout the specified hierarchy as a partition diagram.",
        "subCategory": null
      },
      {
        "title": "partition.size - set the layout size.",
        "subCategory": null
      },
      {
        "title": "partition.round - set whether the output coordinates are rounded.",
        "subCategory": null
      },
      {
        "title": "partition.padding - set the padding.",
        "subCategory": null
      },
      {
        "title": "d3.pack - create a new circle-packing layout.",
        "subCategory": null
      },
      {
        "title": "pack - layout the specified hierarchy using circle-packing.",
        "subCategory": null
      },
      {
        "title": "pack.radius - set the radius accessor.",
        "subCategory": null
      },
      {
        "title": "pack.size - set the layout size.",
        "subCategory": null
      },
      {
        "title": "pack.padding - set the padding.",
        "subCategory": null
      },
      {
        "title": "d3.packSiblings - pack the specified array of circles.",
        "subCategory": null
      },
      {
        "title": "d3.packEnclose - enclose the specified array of circles.",
        "subCategory": null
      }
    ],
    "name": "d3-hierarchy",
    "size": 13504,
    "children": [
      {
        "name": "d3.hierarchy - constructs a root node from hierarchical data.",
        "value": 13504
      },
      {
        "name": "node.ancestors - generate an array of ancestors.",
        "value": 13504
      },
      {
        "name": "node.descendants - generate an array of descendants.",
        "value": 13504
      },
      {
        "name": "node.leaves - generate an array of leaves.",
        "value": 13504
      },
      {
        "name": "node.path - generate the shortest path to another node.",
        "value": 13504
      },
      {
        "name": "node.links - generate an array of links.",
        "value": 13504
      },
      {
        "name": "node.sum - evaluate and aggregate quantitative values.",
        "value": 13504
      },
      {
        "name": "node.sort - sort all descendant siblings.",
        "value": 13504
      },
      {
        "name": "node.count - count the number of leaves.",
        "value": 13504
      },
      {
        "name": "node.each - breadth-first traversal.",
        "value": 13504
      },
      {
        "name": "node.eachAfter - post-order traversal.",
        "value": 13504
      },
      {
        "name": "node.eachBefore - pre-order traversal.",
        "value": 13504
      },
      {
        "name": "node.copy - copy a hierarchy.",
        "value": 13504
      },
      {
        "name": "d3.stratify - create a new stratify operator.",
        "value": 13504
      },
      {
        "name": "stratify - construct a root node from tabular data.",
        "value": 13504
      },
      {
        "name": "stratify.id - set the node id accessor.",
        "value": 13504
      },
      {
        "name": "stratify.parentId - set the parent node id accessor.",
        "value": 13504
      },
      {
        "name": "d3.cluster - create a new cluster (dendrogram) layout.",
        "value": 13504
      },
      {
        "name": "cluster - layout the specified hierarchy in a dendrogram.",
        "value": 13504
      },
      {
        "name": "cluster.size - set the layout size.",
        "value": 13504
      },
      {
        "name": "cluster.nodeSize - set the node size.",
        "value": 13504
      },
      {
        "name": "cluster.separation - set the separation between leaves.",
        "value": 13504
      },
      {
        "name": "d3.tree - create a new tidy tree layout.",
        "value": 13504
      },
      {
        "name": "tree - layout the specified hierarchy in a tidy tree.",
        "value": 13504
      },
      {
        "name": "tree.size - set the layout size.",
        "value": 13504
      },
      {
        "name": "tree.nodeSize - set the node size.",
        "value": 13504
      },
      {
        "name": "tree.separation - set the separation between nodes.",
        "value": 13504
      },
      {
        "name": "d3.treemap - create a new treemap layout.",
        "value": 13504
      },
      {
        "name": "treemap - layout the specified hierarchy as a treemap.",
        "value": 13504
      },
      {
        "name": "treemap.tile - set the tiling method.",
        "value": 13504
      },
      {
        "name": "treemap.size - set the layout size.",
        "value": 13504
      },
      {
        "name": "treemap.round - set whether the output coordinates are rounded.",
        "value": 13504
      },
      {
        "name": "treemap.padding - set the padding.",
        "value": 13504
      },
      {
        "name": "treemap.paddingInner - set the padding between siblings.",
        "value": 13504
      },
      {
        "name": "treemap.paddingOuter - set the padding between parent and children.",
        "value": 13504
      },
      {
        "name": "treemap.paddingTop - set the padding between the parent’s top edge and children.",
        "value": 13504
      },
      {
        "name": "treemap.paddingRight - set the padding between the parent’s right edge and children.",
        "value": 13504
      },
      {
        "name": "treemap.paddingBottom - set the padding between the parent’s bottom edge and children.",
        "value": 13504
      },
      {
        "name": "treemap.paddingLeft - set the padding between the parent’s left edge and children.",
        "value": 13504
      },
      {
        "name": "d3.treemapBinary - tile using a balanced binary tree.",
        "value": 13504
      },
      {
        "name": "d3.treemapDice - tile into a horizontal row.",
        "value": 13504
      },
      {
        "name": "d3.treemapSlice - tile into a vertical column.",
        "value": 13504
      },
      {
        "name": "d3.treemapSliceDice - alternate between slicing and dicing.",
        "value": 13504
      },
      {
        "name": "d3.treemapSquarify - tile using squarified rows per Bruls et. al.",
        "value": 13504
      },
      {
        "name": "d3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.",
        "value": 13504
      },
      {
        "name": "squarify.ratio - set the desired rectangle aspect ratio.",
        "value": 13504
      },
      {
        "name": "d3.partition - create a new partition (icicle or sunburst) layout.",
        "value": 13504
      },
      {
        "name": "partition - layout the specified hierarchy as a partition diagram.",
        "value": 13504
      },
      {
        "name": "partition.size - set the layout size.",
        "value": 13504
      },
      {
        "name": "partition.round - set whether the output coordinates are rounded.",
        "value": 13504
      },
      {
        "name": "partition.padding - set the padding.",
        "value": 13504
      },
      {
        "name": "d3.pack - create a new circle-packing layout.",
        "value": 13504
      },
      {
        "name": "pack - layout the specified hierarchy using circle-packing.",
        "value": 13504
      },
      {
        "name": "pack.radius - set the radius accessor.",
        "value": 13504
      },
      {
        "name": "pack.size - set the layout size.",
        "value": 13504
      },
      {
        "name": "pack.padding - set the padding.",
        "value": 13504
      },
      {
        "name": "d3.packSiblings - pack the specified array of circles.",
        "value": 13504
      },
      {
        "name": "d3.packEnclose - enclose the specified array of circles.",
        "value": 13504
      }
    ]
  },
  {
    "title": "Delaunay",
    "repo": "d3-delaunay",
    "url": "https://unpkg.com/d3-delaunay@4.1.5/dist/d3-delaunay.min.js",
    "items": [],
    "name": "d3-delaunay",
    "size": 13274,
    "children": []
  },
  {
    "title": "Selections",
    "repo": "d3-selection",
    "items": [
      {
        "title": "d3.selection - select the root document element.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.select - select an element from the document.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.selectAll - select multiple elements from the document.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "selection.select - select a descendant element for each selected element.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "selection.selectAll - select multiple descendants for each selected element.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "selection.filter - filter elements based on data.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "selection.merge - merge this selection with another.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.matcher - test whether an element matches a selector.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.selector - select an element.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.selectorAll - select elements.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.window - get a node’s owner window.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "d3.style - get a node’s current style value.",
        "subCategory": "Selecting Elements"
      },
      {
        "title": "selection.attr - get or set an attribute.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.classed - get, add or remove CSS classes.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.style - get or set a style property.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.property - get or set a (raw) property.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.text - get or set the text content.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.html - get or set the inner HTML.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.append - create, append and select new elements.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.insert - create, insert and select new elements.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.remove - remove elements from the document.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.clone - insert clones of selected elements.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.sort - sort elements in the document based on data.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.order - reorders elements in the document to match the selection.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.raise - reorders each element as the last child of its parent.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.lower - reorders each element as the first child of its parent.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "d3.create - create and select a detached element.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "d3.creator - create an element by name.",
        "subCategory": "Modifying Elements"
      },
      {
        "title": "selection.data - join elements to data.",
        "subCategory": "Joining Data"
      },
      {
        "title": "selection.join - join elements to data.",
        "subCategory": "Joining Data"
      },
      {
        "title": "selection.enter - get the enter selection (data missing elements).",
        "subCategory": "Joining Data"
      },
      {
        "title": "selection.exit - get the exit selection (elements missing data).",
        "subCategory": "Joining Data"
      },
      {
        "title": "selection.datum - get or set element data (without joining).",
        "subCategory": "Joining Data"
      },
      {
        "title": "selection.on - add or remove event listeners.",
        "subCategory": "Handling Events"
      },
      {
        "title": "selection.dispatch - dispatch a custom event.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.event - the current user event, during interaction.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.customEvent - temporarily define a custom event.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.mouse - get the mouse position relative to a given container.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.touch - get a touch position relative to a given container.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.touches - get the touch positions relative to a given container.",
        "subCategory": "Handling Events"
      },
      {
        "title": "d3.clientPoint - get a position relative to a given container.",
        "subCategory": "Handling Events"
      },
      {
        "title": "selection.each - call a function for each element.",
        "subCategory": "Control Flow"
      },
      {
        "title": "selection.call - call a function with this selection.",
        "subCategory": "Control Flow"
      },
      {
        "title": "selection.empty - returns true if this selection is empty.",
        "subCategory": "Control Flow"
      },
      {
        "title": "selection.nodes - returns an array of all selected elements.",
        "subCategory": "Control Flow"
      },
      {
        "title": "selection.node - returns the first (non-null) element.",
        "subCategory": "Control Flow"
      },
      {
        "title": "selection.size - returns the count of elements.",
        "subCategory": "Control Flow"
      },
      {
        "title": "d3.local - declares a new local variable.",
        "subCategory": "Local Variables"
      },
      {
        "title": "local.set - set a local variable’s value.",
        "subCategory": "Local Variables"
      },
      {
        "title": "local.get - get a local variable’s value.",
        "subCategory": "Local Variables"
      },
      {
        "title": "local.remove - delete a local variable.",
        "subCategory": "Local Variables"
      },
      {
        "title": "local.toString - get the property identifier of a local variable.",
        "subCategory": "Local Variables"
      },
      {
        "title": "d3.namespace - qualify a prefixed XML name, such as “xlink:href”.",
        "subCategory": "Namespaces"
      },
      {
        "title": "d3.namespaces - the built-in XML namespaces.",
        "subCategory": "Namespaces"
      }
    ],
    "name": "d3-selection",
    "size": 13052,
    "children": [
      {
        "name": "d3.selection - select the root document element.",
        "value": 13052
      },
      {
        "name": "d3.select - select an element from the document.",
        "value": 13052
      },
      {
        "name": "d3.selectAll - select multiple elements from the document.",
        "value": 13052
      },
      {
        "name": "selection.select - select a descendant element for each selected element.",
        "value": 13052
      },
      {
        "name": "selection.selectAll - select multiple descendants for each selected element.",
        "value": 13052
      },
      {
        "name": "selection.filter - filter elements based on data.",
        "value": 13052
      },
      {
        "name": "selection.merge - merge this selection with another.",
        "value": 13052
      },
      {
        "name": "d3.matcher - test whether an element matches a selector.",
        "value": 13052
      },
      {
        "name": "d3.selector - select an element.",
        "value": 13052
      },
      {
        "name": "d3.selectorAll - select elements.",
        "value": 13052
      },
      {
        "name": "d3.window - get a node’s owner window.",
        "value": 13052
      },
      {
        "name": "d3.style - get a node’s current style value.",
        "value": 13052
      },
      {
        "name": "selection.attr - get or set an attribute.",
        "value": 13052
      },
      {
        "name": "selection.classed - get, add or remove CSS classes.",
        "value": 13052
      },
      {
        "name": "selection.style - get or set a style property.",
        "value": 13052
      },
      {
        "name": "selection.property - get or set a (raw) property.",
        "value": 13052
      },
      {
        "name": "selection.text - get or set the text content.",
        "value": 13052
      },
      {
        "name": "selection.html - get or set the inner HTML.",
        "value": 13052
      },
      {
        "name": "selection.append - create, append and select new elements.",
        "value": 13052
      },
      {
        "name": "selection.insert - create, insert and select new elements.",
        "value": 13052
      },
      {
        "name": "selection.remove - remove elements from the document.",
        "value": 13052
      },
      {
        "name": "selection.clone - insert clones of selected elements.",
        "value": 13052
      },
      {
        "name": "selection.sort - sort elements in the document based on data.",
        "value": 13052
      },
      {
        "name": "selection.order - reorders elements in the document to match the selection.",
        "value": 13052
      },
      {
        "name": "selection.raise - reorders each element as the last child of its parent.",
        "value": 13052
      },
      {
        "name": "selection.lower - reorders each element as the first child of its parent.",
        "value": 13052
      },
      {
        "name": "d3.create - create and select a detached element.",
        "value": 13052
      },
      {
        "name": "d3.creator - create an element by name.",
        "value": 13052
      },
      {
        "name": "selection.data - join elements to data.",
        "value": 13052
      },
      {
        "name": "selection.join - join elements to data.",
        "value": 13052
      },
      {
        "name": "selection.enter - get the enter selection (data missing elements).",
        "value": 13052
      },
      {
        "name": "selection.exit - get the exit selection (elements missing data).",
        "value": 13052
      },
      {
        "name": "selection.datum - get or set element data (without joining).",
        "value": 13052
      },
      {
        "name": "selection.on - add or remove event listeners.",
        "value": 13052
      },
      {
        "name": "selection.dispatch - dispatch a custom event.",
        "value": 13052
      },
      {
        "name": "d3.event - the current user event, during interaction.",
        "value": 13052
      },
      {
        "name": "d3.customEvent - temporarily define a custom event.",
        "value": 13052
      },
      {
        "name": "d3.mouse - get the mouse position relative to a given container.",
        "value": 13052
      },
      {
        "name": "d3.touch - get a touch position relative to a given container.",
        "value": 13052
      },
      {
        "name": "d3.touches - get the touch positions relative to a given container.",
        "value": 13052
      },
      {
        "name": "d3.clientPoint - get a position relative to a given container.",
        "value": 13052
      },
      {
        "name": "selection.each - call a function for each element.",
        "value": 13052
      },
      {
        "name": "selection.call - call a function with this selection.",
        "value": 13052
      },
      {
        "name": "selection.empty - returns true if this selection is empty.",
        "value": 13052
      },
      {
        "name": "selection.nodes - returns an array of all selected elements.",
        "value": 13052
      },
      {
        "name": "selection.node - returns the first (non-null) element.",
        "value": 13052
      },
      {
        "name": "selection.size - returns the count of elements.",
        "value": 13052
      },
      {
        "name": "d3.local - declares a new local variable.",
        "value": 13052
      },
      {
        "name": "local.set - set a local variable’s value.",
        "value": 13052
      },
      {
        "name": "local.get - get a local variable’s value.",
        "value": 13052
      },
      {
        "name": "local.remove - delete a local variable.",
        "value": 13052
      },
      {
        "name": "local.toString - get the property identifier of a local variable.",
        "value": 13052
      },
      {
        "name": "d3.namespace - qualify a prefixed XML name, such as “xlink:href”.",
        "value": 13052
      },
      {
        "name": "d3.namespaces - the built-in XML namespaces.",
        "value": 13052
      }
    ]
  },
  {
    "title": "Selection Multi",
    "repo": "d3-selection-multi",
    "url": "https://d3js.org/d3-selection-multi.v1.min.js",
    "items": [],
    "name": "d3-selection-multi",
    "size": 1741,
    "children": []
  },
  {
    "title": "Transitions",
    "repo": "d3-transition",
    "items": [
      {
        "title": "selection.transition - schedule a transition for the selected elements.",
        "subCategory": null
      },
      {
        "title": "selection.interrupt - interrupt and cancel transitions on the selected elements.",
        "subCategory": null
      },
      {
        "title": "d3.transition - schedule a transition on the root document element.",
        "subCategory": null
      },
      {
        "title": "transition.select - schedule a transition on the selected elements.",
        "subCategory": null
      },
      {
        "title": "transition.selectAll - schedule a transition on the selected elements.",
        "subCategory": null
      },
      {
        "title": "transition.filter - filter elements based on data.",
        "subCategory": null
      },
      {
        "title": "transition.merge - merge this transition with another.",
        "subCategory": null
      },
      {
        "title": "transition.selection - returns a selection for this transition.",
        "subCategory": null
      },
      {
        "title": "transition.transition - schedule a new transition following this one.",
        "subCategory": null
      },
      {
        "title": "transition.call - call a function with this transition.",
        "subCategory": null
      },
      {
        "title": "transition.nodes - returns an array of all selected elements.",
        "subCategory": null
      },
      {
        "title": "transition.node - returns the first (non-null) element.",
        "subCategory": null
      },
      {
        "title": "transition.size - returns the count of elements.",
        "subCategory": null
      },
      {
        "title": "transition.empty - returns true if this transition is empty.",
        "subCategory": null
      },
      {
        "title": "transition.each - call a function for each element.",
        "subCategory": null
      },
      {
        "title": "transition.on - add or remove transition event listeners.",
        "subCategory": null
      },
      {
        "title": "transition.attr - tween the given attribute using the default interpolator.",
        "subCategory": null
      },
      {
        "title": "transition.attrTween - tween the given attribute using a custom interpolator.",
        "subCategory": null
      },
      {
        "title": "transition.style - tween the given style property using the default interpolator.",
        "subCategory": null
      },
      {
        "title": "transition.styleTween - tween the given style property using a custom interpolator.",
        "subCategory": null
      },
      {
        "title": "transition.text - set the text content when the transition starts.",
        "subCategory": null
      },
      {
        "title": "transition.remove - remove the selected elements when the transition ends.",
        "subCategory": null
      },
      {
        "title": "transition.tween - run custom code during the transition.",
        "subCategory": null
      },
      {
        "title": "transition.delay - specify per-element delay in milliseconds.",
        "subCategory": null
      },
      {
        "title": "transition.duration - specify per-element duration in milliseconds.",
        "subCategory": null
      },
      {
        "title": "transition.ease - specify the easing function.",
        "subCategory": null
      },
      {
        "title": "d3.active - select the active transition for a given node.",
        "subCategory": null
      },
      {
        "title": "d3.interrupt - interrupt the active transition for a given node.",
        "subCategory": null
      }
    ],
    "name": "d3-transition",
    "size": 10850,
    "children": [
      {
        "name": "selection.transition - schedule a transition for the selected elements.",
        "value": 10850
      },
      {
        "name": "selection.interrupt - interrupt and cancel transitions on the selected elements.",
        "value": 10850
      },
      {
        "name": "d3.transition - schedule a transition on the root document element.",
        "value": 10850
      },
      {
        "name": "transition.select - schedule a transition on the selected elements.",
        "value": 10850
      },
      {
        "name": "transition.selectAll - schedule a transition on the selected elements.",
        "value": 10850
      },
      {
        "name": "transition.filter - filter elements based on data.",
        "value": 10850
      },
      {
        "name": "transition.merge - merge this transition with another.",
        "value": 10850
      },
      {
        "name": "transition.selection - returns a selection for this transition.",
        "value": 10850
      },
      {
        "name": "transition.transition - schedule a new transition following this one.",
        "value": 10850
      },
      {
        "name": "transition.call - call a function with this transition.",
        "value": 10850
      },
      {
        "name": "transition.nodes - returns an array of all selected elements.",
        "value": 10850
      },
      {
        "name": "transition.node - returns the first (non-null) element.",
        "value": 10850
      },
      {
        "name": "transition.size - returns the count of elements.",
        "value": 10850
      },
      {
        "name": "transition.empty - returns true if this transition is empty.",
        "value": 10850
      },
      {
        "name": "transition.each - call a function for each element.",
        "value": 10850
      },
      {
        "name": "transition.on - add or remove transition event listeners.",
        "value": 10850
      },
      {
        "name": "transition.attr - tween the given attribute using the default interpolator.",
        "value": 10850
      },
      {
        "name": "transition.attrTween - tween the given attribute using a custom interpolator.",
        "value": 10850
      },
      {
        "name": "transition.style - tween the given style property using the default interpolator.",
        "value": 10850
      },
      {
        "name": "transition.styleTween - tween the given style property using a custom interpolator.",
        "value": 10850
      },
      {
        "name": "transition.text - set the text content when the transition starts.",
        "value": 10850
      },
      {
        "name": "transition.remove - remove the selected elements when the transition ends.",
        "value": 10850
      },
      {
        "name": "transition.tween - run custom code during the transition.",
        "value": 10850
      },
      {
        "name": "transition.delay - specify per-element delay in milliseconds.",
        "value": 10850
      },
      {
        "name": "transition.duration - specify per-element duration in milliseconds.",
        "value": 10850
      },
      {
        "name": "transition.ease - specify the easing function.",
        "value": 10850
      },
      {
        "name": "d3.active - select the active transition for a given node.",
        "value": 10850
      },
      {
        "name": "d3.interrupt - interrupt the active transition for a given node.",
        "value": 10850
      }
    ]
  },
  {
    "title": "Geo Polygon",
    "repo": "d3-geo-polygon",
    "items": [],
    "name": "d3-geo-polygon",
    "size": 9790,
    "children": []
  },
  {
    "title": "Colors",
    "repo": "d3-color",
    "items": [
      {
        "title": "d3.color - parse the given CSS color specifier.",
        "subCategory": null
      },
      {
        "title": "color.rgb - compute the RGB equivalent of this color.",
        "subCategory": null
      },
      {
        "title": "color.brighter - create a brighter copy of this color.",
        "subCategory": null
      },
      {
        "title": "color.darker - create a darker copy of this color.",
        "subCategory": null
      },
      {
        "title": "color.displayable - returns true if the color is displayable on standard hardware.",
        "subCategory": null
      },
      {
        "title": "color.hex - returns the hexadecimal RGB string representation of this color.",
        "subCategory": null
      },
      {
        "title": "color.toString - returns the RGB string representation of this color.",
        "subCategory": null
      },
      {
        "title": "d3.rgb - create a new RGB color.",
        "subCategory": null
      },
      {
        "title": "d3.hsl - create a new HSL color.",
        "subCategory": null
      },
      {
        "title": "d3.lab - create a new Lab color.",
        "subCategory": null
      },
      {
        "title": "d3.hcl - create a new HCL color.",
        "subCategory": null
      },
      {
        "title": "d3.lch - create a new HCL color.",
        "subCategory": null
      },
      {
        "title": "d3.gray - create a new Lab gray.",
        "subCategory": null
      },
      {
        "title": "d3.cubehelix - create a new Cubehelix color.",
        "subCategory": null
      }
    ],
    "name": "d3-color",
    "size": 9771,
    "children": [
      {
        "name": "d3.color - parse the given CSS color specifier.",
        "value": 9771
      },
      {
        "name": "color.rgb - compute the RGB equivalent of this color.",
        "value": 9771
      },
      {
        "name": "color.brighter - create a brighter copy of this color.",
        "value": 9771
      },
      {
        "name": "color.darker - create a darker copy of this color.",
        "value": 9771
      },
      {
        "name": "color.displayable - returns true if the color is displayable on standard hardware.",
        "value": 9771
      },
      {
        "name": "color.hex - returns the hexadecimal RGB string representation of this color.",
        "value": 9771
      },
      {
        "name": "color.toString - returns the RGB string representation of this color.",
        "value": 9771
      },
      {
        "name": "d3.rgb - create a new RGB color.",
        "value": 9771
      },
      {
        "name": "d3.hsl - create a new HSL color.",
        "value": 9771
      },
      {
        "name": "d3.lab - create a new Lab color.",
        "value": 9771
      },
      {
        "name": "d3.hcl - create a new HCL color.",
        "value": 9771
      },
      {
        "name": "d3.lch - create a new HCL color.",
        "value": 9771
      },
      {
        "name": "d3.gray - create a new Lab gray.",
        "value": 9771
      },
      {
        "name": "d3.cubehelix - create a new Cubehelix color.",
        "value": 9771
      }
    ]
  },
  {
    "title": "Voronoi",
    "repo": "d3-voronoi",
    "isDeprecated": true,
    "items": [
      {
        "title": "d3.voronoi - create a new Voronoi generator.",
        "subCategory": null
      },
      {
        "title": "voronoi - generate a new Voronoi diagram for the given points.",
        "subCategory": null
      },
      {
        "title": "voronoi.polygons - compute the Voronoi polygons for the given points.",
        "subCategory": null
      },
      {
        "title": "voronoi.triangles - compute the Delaunay triangles for the given points.",
        "subCategory": null
      },
      {
        "title": "voronoi.links - compute the Delaunay links for the given points.",
        "subCategory": null
      },
      {
        "title": "voronoi.x - set the x accessor.",
        "subCategory": null
      },
      {
        "title": "voronoi.y - set the y accessor.",
        "subCategory": null
      },
      {
        "title": "voronoi.extent - set the observed extent of points.",
        "subCategory": null
      },
      {
        "title": "voronoi.size - set the observed extent of points.",
        "subCategory": null
      },
      {
        "title": "diagram.polygons - compute the polygons for this Voronoi diagram.",
        "subCategory": null
      },
      {
        "title": "diagram.triangles - compute the triangles for this Voronoi diagram.",
        "subCategory": null
      },
      {
        "title": "diagram.links - compute the links for this Voronoi diagram.",
        "subCategory": null
      },
      {
        "title": "diagram.find - find the closest point in this Voronoi diagram.",
        "subCategory": null
      }
    ],
    "name": "d3-voronoi",
    "size": 9197,
    "children": [
      {
        "name": "d3.voronoi - create a new Voronoi generator.",
        "value": 9197
      },
      {
        "name": "voronoi - generate a new Voronoi diagram for the given points.",
        "value": 9197
      },
      {
        "name": "voronoi.polygons - compute the Voronoi polygons for the given points.",
        "value": 9197
      },
      {
        "name": "voronoi.triangles - compute the Delaunay triangles for the given points.",
        "value": 9197
      },
      {
        "name": "voronoi.links - compute the Delaunay links for the given points.",
        "value": 9197
      },
      {
        "name": "voronoi.x - set the x accessor.",
        "value": 9197
      },
      {
        "name": "voronoi.y - set the y accessor.",
        "value": 9197
      },
      {
        "name": "voronoi.extent - set the observed extent of points.",
        "value": 9197
      },
      {
        "name": "voronoi.size - set the observed extent of points.",
        "value": 9197
      },
      {
        "name": "diagram.polygons - compute the polygons for this Voronoi diagram.",
        "value": 9197
      },
      {
        "name": "diagram.triangles - compute the triangles for this Voronoi diagram.",
        "value": 9197
      },
      {
        "name": "diagram.links - compute the links for this Voronoi diagram.",
        "value": 9197
      },
      {
        "name": "diagram.find - find the closest point in this Voronoi diagram.",
        "value": 9197
      }
    ]
  },
  {
    "title": "Time Formats",
    "repo": "d3-time-format",
    "items": [
      {
        "title": "d3.timeFormat - alias for locale.format on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.timeParse - alias for locale.parse on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.utcFormat -  alias for locale.utcFormat on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.utcParse -  alias for locale.utcParse on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.isoFormat - an ISO 8601 UTC formatter.",
        "subCategory": null
      },
      {
        "title": "d3.isoParse - an ISO 8601 UTC parser.",
        "subCategory": null
      },
      {
        "title": "d3.timeFormatLocale - define a custom locale.",
        "subCategory": null
      },
      {
        "title": "d3.timeFormatDefaultLocale - define the default locale.",
        "subCategory": null
      },
      {
        "title": "locale.format - create a time formatter.",
        "subCategory": null
      },
      {
        "title": "locale.parse - create a time parser.",
        "subCategory": null
      },
      {
        "title": "locale.utcFormat - create a UTC formatter.",
        "subCategory": null
      },
      {
        "title": "locale.utcParse - create a UTC parser.",
        "subCategory": null
      }
    ],
    "name": "d3-time-format",
    "size": 9004,
    "children": [
      {
        "name": "d3.timeFormat - alias for locale.format on the default locale.",
        "value": 9004
      },
      {
        "name": "d3.timeParse - alias for locale.parse on the default locale.",
        "value": 9004
      },
      {
        "name": "d3.utcFormat -  alias for locale.utcFormat on the default locale.",
        "value": 9004
      },
      {
        "name": "d3.utcParse -  alias for locale.utcParse on the default locale.",
        "value": 9004
      },
      {
        "name": "d3.isoFormat - an ISO 8601 UTC formatter.",
        "value": 9004
      },
      {
        "name": "d3.isoParse - an ISO 8601 UTC parser.",
        "value": 9004
      },
      {
        "name": "d3.timeFormatLocale - define a custom locale.",
        "value": 9004
      },
      {
        "name": "d3.timeFormatDefaultLocale - define the default locale.",
        "value": 9004
      },
      {
        "name": "locale.format - create a time formatter.",
        "value": 9004
      },
      {
        "name": "locale.parse - create a time parser.",
        "value": 9004
      },
      {
        "name": "locale.utcFormat - create a UTC formatter.",
        "value": 9004
      },
      {
        "name": "locale.utcParse - create a UTC parser.",
        "value": 9004
      }
    ]
  },
  {
    "title": "Zooming",
    "repo": "d3-zoom",
    "items": [
      {
        "title": "d3.zoom - create a zoom behavior.",
        "subCategory": null
      },
      {
        "title": "zoom - apply the zoom behavior to the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.transform - change the transform for the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.translateTo - translate the transform for the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.translateBy - translate the transform for the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.scaleBy - scale the transform for the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.scaleTo - scale the transform for the selected elements.",
        "subCategory": null
      },
      {
        "title": "zoom.filter - control which input events initiate zooming.",
        "subCategory": null
      },
      {
        "title": "zoom.touchable - set the touch support detector.",
        "subCategory": null
      },
      {
        "title": "zoom.wheelDelta - override scaling for wheel events.",
        "subCategory": null
      },
      {
        "title": "zoom.clickDistance - set the click distance threshold.",
        "subCategory": null
      },
      {
        "title": "zoom.extent - set the extent of the viewport.",
        "subCategory": null
      },
      {
        "title": "zoom.scaleExtent - set the allowed scale range.",
        "subCategory": null
      },
      {
        "title": "zoom.translateExtent - set the extent of the zoomable world.",
        "subCategory": null
      },
      {
        "title": "zoom.constrain - override the transform constraint logic.",
        "subCategory": null
      },
      {
        "title": "zoom.duration - set the duration of zoom transitions.",
        "subCategory": null
      },
      {
        "title": "zoom.interpolate - control the interpolation of zoom transitions.",
        "subCategory": null
      },
      {
        "title": "zoom.on - listen for zoom events.",
        "subCategory": null
      },
      {
        "title": "d3.zoomTransform - get the zoom transform for a given element.",
        "subCategory": null
      },
      {
        "title": "transform.scale - scale a transform by the specified amount.",
        "subCategory": null
      },
      {
        "title": "transform.translate - translate a transform by the specified amount.",
        "subCategory": null
      },
      {
        "title": "transform.apply - apply the transform to the given point.",
        "subCategory": null
      },
      {
        "title": "transform.applyX - apply the transform to the given x-coordinate.",
        "subCategory": null
      },
      {
        "title": "transform.applyY - apply the transform to the given y-coordinate.",
        "subCategory": null
      },
      {
        "title": "transform.invert - unapply the transform to the given point.",
        "subCategory": null
      },
      {
        "title": "transform.invertX - unapply the transform to the given x-coordinate.",
        "subCategory": null
      },
      {
        "title": "transform.invertY - unapply the transform to the given y-coordinate.",
        "subCategory": null
      },
      {
        "title": "transform.rescaleX - apply the transform to an x-scale’s domain.",
        "subCategory": null
      },
      {
        "title": "transform.rescaleY - apply the transform to a y-scale’s domain.",
        "subCategory": null
      },
      {
        "title": "transform.toString - format the transform as an SVG transform string.",
        "subCategory": null
      },
      {
        "title": "d3.zoomIdentity - the identity transform.",
        "subCategory": null
      }
    ],
    "name": "d3-zoom",
    "size": 8927,
    "children": [
      {
        "name": "d3.zoom - create a zoom behavior.",
        "value": 8927
      },
      {
        "name": "zoom - apply the zoom behavior to the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.transform - change the transform for the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.translateTo - translate the transform for the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.translateBy - translate the transform for the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.scaleBy - scale the transform for the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.scaleTo - scale the transform for the selected elements.",
        "value": 8927
      },
      {
        "name": "zoom.filter - control which input events initiate zooming.",
        "value": 8927
      },
      {
        "name": "zoom.touchable - set the touch support detector.",
        "value": 8927
      },
      {
        "name": "zoom.wheelDelta - override scaling for wheel events.",
        "value": 8927
      },
      {
        "name": "zoom.clickDistance - set the click distance threshold.",
        "value": 8927
      },
      {
        "name": "zoom.extent - set the extent of the viewport.",
        "value": 8927
      },
      {
        "name": "zoom.scaleExtent - set the allowed scale range.",
        "value": 8927
      },
      {
        "name": "zoom.translateExtent - set the extent of the zoomable world.",
        "value": 8927
      },
      {
        "name": "zoom.constrain - override the transform constraint logic.",
        "value": 8927
      },
      {
        "name": "zoom.duration - set the duration of zoom transitions.",
        "value": 8927
      },
      {
        "name": "zoom.interpolate - control the interpolation of zoom transitions.",
        "value": 8927
      },
      {
        "name": "zoom.on - listen for zoom events.",
        "value": 8927
      },
      {
        "name": "d3.zoomTransform - get the zoom transform for a given element.",
        "value": 8927
      },
      {
        "name": "transform.scale - scale a transform by the specified amount.",
        "value": 8927
      },
      {
        "name": "transform.translate - translate a transform by the specified amount.",
        "value": 8927
      },
      {
        "name": "transform.apply - apply the transform to the given point.",
        "value": 8927
      },
      {
        "name": "transform.applyX - apply the transform to the given x-coordinate.",
        "value": 8927
      },
      {
        "name": "transform.applyY - apply the transform to the given y-coordinate.",
        "value": 8927
      },
      {
        "name": "transform.invert - unapply the transform to the given point.",
        "value": 8927
      },
      {
        "name": "transform.invertX - unapply the transform to the given x-coordinate.",
        "value": 8927
      },
      {
        "name": "transform.invertY - unapply the transform to the given y-coordinate.",
        "value": 8927
      },
      {
        "name": "transform.rescaleX - apply the transform to an x-scale’s domain.",
        "value": 8927
      },
      {
        "name": "transform.rescaleY - apply the transform to a y-scale’s domain.",
        "value": 8927
      },
      {
        "name": "transform.toString - format the transform as an SVG transform string.",
        "value": 8927
      },
      {
        "name": "d3.zoomIdentity - the identity transform.",
        "value": 8927
      }
    ]
  },
  {
    "title": "Brushes",
    "repo": "d3-brush",
    "items": [
      {
        "title": "d3.brush - create a new two-dimensional brush.",
        "subCategory": null
      },
      {
        "title": "d3.brushX - create a brush along the x-dimension.",
        "subCategory": null
      },
      {
        "title": "d3.brushY - create a brush along the y-dimension.",
        "subCategory": null
      },
      {
        "title": "brush - apply the brush to a selection.",
        "subCategory": null
      },
      {
        "title": "brush.move - move the brush selection.",
        "subCategory": null
      },
      {
        "title": "brush.extent - define the brushable region.",
        "subCategory": null
      },
      {
        "title": "brush.filter - control which input events initiate brushing.",
        "subCategory": null
      },
      {
        "title": "brush.handleSize - set the size of the brush handles.",
        "subCategory": null
      },
      {
        "title": "brush.on - listen for brush events.",
        "subCategory": null
      },
      {
        "title": "d3.brushSelection - get the brush selection for a given node.",
        "subCategory": null
      }
    ],
    "name": "d3-brush",
    "size": 8469,
    "children": [
      {
        "name": "d3.brush - create a new two-dimensional brush.",
        "value": 8469
      },
      {
        "name": "d3.brushX - create a brush along the x-dimension.",
        "value": 8469
      },
      {
        "name": "d3.brushY - create a brush along the y-dimension.",
        "value": 8469
      },
      {
        "name": "brush - apply the brush to a selection.",
        "value": 8469
      },
      {
        "name": "brush.move - move the brush selection.",
        "value": 8469
      },
      {
        "name": "brush.extent - define the brushable region.",
        "value": 8469
      },
      {
        "name": "brush.filter - control which input events initiate brushing.",
        "value": 8469
      },
      {
        "name": "brush.handleSize - set the size of the brush handles.",
        "value": 8469
      },
      {
        "name": "brush.on - listen for brush events.",
        "value": 8469
      },
      {
        "name": "d3.brushSelection - get the brush selection for a given node.",
        "value": 8469
      }
    ]
  },
  {
    "title": "Forces",
    "repo": "d3-force",
    "items": [
      {
        "title": "d3.forceSimulation - create a new force simulation.",
        "subCategory": null
      },
      {
        "title": "simulation.restart - reheat and restart the simulation’s timer.",
        "subCategory": null
      },
      {
        "title": "simulation.stop - stop the simulation’s timer.",
        "subCategory": null
      },
      {
        "title": "simulation.tick - advance the simulation one step.",
        "subCategory": null
      },
      {
        "title": "simulation.nodes - set the simulation’s nodes.",
        "subCategory": null
      },
      {
        "title": "simulation.alpha - set the current alpha.",
        "subCategory": null
      },
      {
        "title": "simulation.alphaMin - set the minimum alpha threshold.",
        "subCategory": null
      },
      {
        "title": "simulation.alphaDecay - set the alpha exponential decay rate.",
        "subCategory": null
      },
      {
        "title": "simulation.alphaTarget - set the target alpha.",
        "subCategory": null
      },
      {
        "title": "simulation.velocityDecay - set the velocity decay rate.",
        "subCategory": null
      },
      {
        "title": "simulation.force - add or remove a force.",
        "subCategory": null
      },
      {
        "title": "simulation.find - find the closest node to the given position.",
        "subCategory": null
      },
      {
        "title": "simulation.on - add or remove an event listener.",
        "subCategory": null
      },
      {
        "title": "force - apply the force.",
        "subCategory": null
      },
      {
        "title": "force.initialize - initialize the force with the given nodes.",
        "subCategory": null
      },
      {
        "title": "d3.forceCenter - create a centering force.",
        "subCategory": null
      },
      {
        "title": "center.x - set the center x-coordinate.",
        "subCategory": null
      },
      {
        "title": "center.y - set the center y-coordinate.",
        "subCategory": null
      },
      {
        "title": "d3.forceCollide - create a circle collision force.",
        "subCategory": null
      },
      {
        "title": "collide.radius - set the circle radius.",
        "subCategory": null
      },
      {
        "title": "collide.strength - set the collision resolution strength.",
        "subCategory": null
      },
      {
        "title": "collide.iterations - set the number of iterations.",
        "subCategory": null
      },
      {
        "title": "d3.forceLink - create a link force.",
        "subCategory": null
      },
      {
        "title": "link.links - set the array of links.",
        "subCategory": null
      },
      {
        "title": "link.id - link nodes by numeric index or string identifier.",
        "subCategory": null
      },
      {
        "title": "link.distance - set the link distance.",
        "subCategory": null
      },
      {
        "title": "link.strength - set the link strength.",
        "subCategory": null
      },
      {
        "title": "link.iterations - set the number of iterations.",
        "subCategory": null
      },
      {
        "title": "d3.forceManyBody - create a many-body force.",
        "subCategory": null
      },
      {
        "title": "manyBody.strength - set the force strength.",
        "subCategory": null
      },
      {
        "title": "manyBody.theta - set the Barnes–Hut approximation accuracy.",
        "subCategory": null
      },
      {
        "title": "manyBody.distanceMin - limit the force when nodes are close.",
        "subCategory": null
      },
      {
        "title": "manyBody.distanceMax - limit the force when nodes are far.",
        "subCategory": null
      },
      {
        "title": "d3.forceX - create an x-positioning force.",
        "subCategory": null
      },
      {
        "title": "x.strength - set the force strength.",
        "subCategory": null
      },
      {
        "title": "x.x - set the target x-coordinate.",
        "subCategory": null
      },
      {
        "title": "d3.forceY - create an y-positioning force.",
        "subCategory": null
      },
      {
        "title": "y.strength - set the force strength.",
        "subCategory": null
      },
      {
        "title": "y.y - set the target y-coordinate.",
        "subCategory": null
      },
      {
        "title": "d3.forceRadial - create a radial positioning force.",
        "subCategory": null
      },
      {
        "title": "radial.strength - set the force strength.",
        "subCategory": null
      },
      {
        "title": "radial.radius - set the target radius.",
        "subCategory": null
      },
      {
        "title": "radial.x - set the target center x-coordinate.",
        "subCategory": null
      },
      {
        "title": "radial.y - set the target center y-coordinate.",
        "subCategory": null
      }
    ],
    "name": "d3-force",
    "size": 7978,
    "children": [
      {
        "name": "d3.forceSimulation - create a new force simulation.",
        "value": 7978
      },
      {
        "name": "simulation.restart - reheat and restart the simulation’s timer.",
        "value": 7978
      },
      {
        "name": "simulation.stop - stop the simulation’s timer.",
        "value": 7978
      },
      {
        "name": "simulation.tick - advance the simulation one step.",
        "value": 7978
      },
      {
        "name": "simulation.nodes - set the simulation’s nodes.",
        "value": 7978
      },
      {
        "name": "simulation.alpha - set the current alpha.",
        "value": 7978
      },
      {
        "name": "simulation.alphaMin - set the minimum alpha threshold.",
        "value": 7978
      },
      {
        "name": "simulation.alphaDecay - set the alpha exponential decay rate.",
        "value": 7978
      },
      {
        "name": "simulation.alphaTarget - set the target alpha.",
        "value": 7978
      },
      {
        "name": "simulation.velocityDecay - set the velocity decay rate.",
        "value": 7978
      },
      {
        "name": "simulation.force - add or remove a force.",
        "value": 7978
      },
      {
        "name": "simulation.find - find the closest node to the given position.",
        "value": 7978
      },
      {
        "name": "simulation.on - add or remove an event listener.",
        "value": 7978
      },
      {
        "name": "force - apply the force.",
        "value": 7978
      },
      {
        "name": "force.initialize - initialize the force with the given nodes.",
        "value": 7978
      },
      {
        "name": "d3.forceCenter - create a centering force.",
        "value": 7978
      },
      {
        "name": "center.x - set the center x-coordinate.",
        "value": 7978
      },
      {
        "name": "center.y - set the center y-coordinate.",
        "value": 7978
      },
      {
        "name": "d3.forceCollide - create a circle collision force.",
        "value": 7978
      },
      {
        "name": "collide.radius - set the circle radius.",
        "value": 7978
      },
      {
        "name": "collide.strength - set the collision resolution strength.",
        "value": 7978
      },
      {
        "name": "collide.iterations - set the number of iterations.",
        "value": 7978
      },
      {
        "name": "d3.forceLink - create a link force.",
        "value": 7978
      },
      {
        "name": "link.links - set the array of links.",
        "value": 7978
      },
      {
        "name": "link.id - link nodes by numeric index or string identifier.",
        "value": 7978
      },
      {
        "name": "link.distance - set the link distance.",
        "value": 7978
      },
      {
        "name": "link.strength - set the link strength.",
        "value": 7978
      },
      {
        "name": "link.iterations - set the number of iterations.",
        "value": 7978
      },
      {
        "name": "d3.forceManyBody - create a many-body force.",
        "value": 7978
      },
      {
        "name": "manyBody.strength - set the force strength.",
        "value": 7978
      },
      {
        "name": "manyBody.theta - set the Barnes–Hut approximation accuracy.",
        "value": 7978
      },
      {
        "name": "manyBody.distanceMin - limit the force when nodes are close.",
        "value": 7978
      },
      {
        "name": "manyBody.distanceMax - limit the force when nodes are far.",
        "value": 7978
      },
      {
        "name": "d3.forceX - create an x-positioning force.",
        "value": 7978
      },
      {
        "name": "x.strength - set the force strength.",
        "value": 7978
      },
      {
        "name": "x.x - set the target x-coordinate.",
        "value": 7978
      },
      {
        "name": "d3.forceY - create an y-positioning force.",
        "value": 7978
      },
      {
        "name": "y.strength - set the force strength.",
        "value": 7978
      },
      {
        "name": "y.y - set the target y-coordinate.",
        "value": 7978
      },
      {
        "name": "d3.forceRadial - create a radial positioning force.",
        "value": 7978
      },
      {
        "name": "radial.strength - set the force strength.",
        "value": 7978
      },
      {
        "name": "radial.radius - set the target radius.",
        "value": 7978
      },
      {
        "name": "radial.x - set the target center x-coordinate.",
        "value": 7978
      },
      {
        "name": "radial.y - set the target center y-coordinate.",
        "value": 7978
      }
    ]
  },
  {
    "title": "Collections",
    "repo": "d3-collection",
    "isDeprecated": true,
    "items": [
      {
        "title": "d3.keys - list the keys of an associative array.",
        "subCategory": "Objects"
      },
      {
        "title": "d3.values - list the values of an associated array.",
        "subCategory": "Objects"
      },
      {
        "title": "d3.entries - list the key-value entries of an associative array.",
        "subCategory": "Objects"
      },
      {
        "title": "d3.map - create a new, empty map.",
        "subCategory": "Maps"
      },
      {
        "title": "map.has - returns true if the map contains the given key.",
        "subCategory": "Maps"
      },
      {
        "title": "map.get - get the value for the given key.",
        "subCategory": "Maps"
      },
      {
        "title": "map.set - set the value for the given key.",
        "subCategory": "Maps"
      },
      {
        "title": "map.remove - remove the entry for given key.",
        "subCategory": "Maps"
      },
      {
        "title": "map.clear - remove all entries.",
        "subCategory": "Maps"
      },
      {
        "title": "map.keys - get the array of keys.",
        "subCategory": "Maps"
      },
      {
        "title": "map.values - get the array of values.",
        "subCategory": "Maps"
      },
      {
        "title": "map.entries - get the array of entries (key-values objects).",
        "subCategory": "Maps"
      },
      {
        "title": "map.each - call a function for each entry.",
        "subCategory": "Maps"
      },
      {
        "title": "map.empty - returns false if the map has at least one entry.",
        "subCategory": "Maps"
      },
      {
        "title": "map.size - compute the number of entries.",
        "subCategory": "Maps"
      },
      {
        "title": "d3.set - create a new, empty set.",
        "subCategory": "Sets"
      },
      {
        "title": "set.has - returns true if the set contains the given value.",
        "subCategory": "Sets"
      },
      {
        "title": "set.add - add the given value.",
        "subCategory": "Sets"
      },
      {
        "title": "set.remove - remove the given value.",
        "subCategory": "Sets"
      },
      {
        "title": "set.clear - remove all values.",
        "subCategory": "Sets"
      },
      {
        "title": "set.values - get the array of values.",
        "subCategory": "Sets"
      },
      {
        "title": "set.each - call a function for each value.",
        "subCategory": "Sets"
      },
      {
        "title": "set.empty - returns true if the set has at least one value.",
        "subCategory": "Sets"
      },
      {
        "title": "set.size - compute the number of values.",
        "subCategory": "Sets"
      },
      {
        "title": "d3.nest - create a new nest generator.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.key - add a level to the nest hierarchy.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.sortKeys - sort the current nest level by key.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.sortValues - sort the leaf nest level by value.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.rollup - specify a rollup function for leaf values.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.map - generate the nest, returning a map.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.object - generate the nest, returning an associative array.",
        "subCategory": "Nests"
      },
      {
        "title": "nest.entries - generate the nest, returning an array of key-values tuples.",
        "subCategory": "Nests"
      }
    ],
    "name": "d3-collection",
    "size": 2842,
    "children": [
      {
        "name": "d3.keys - list the keys of an associative array.",
        "value": 2842
      },
      {
        "name": "d3.values - list the values of an associated array.",
        "value": 2842
      },
      {
        "name": "d3.entries - list the key-value entries of an associative array.",
        "value": 2842
      },
      {
        "name": "d3.map - create a new, empty map.",
        "value": 2842
      },
      {
        "name": "map.has - returns true if the map contains the given key.",
        "value": 2842
      },
      {
        "name": "map.get - get the value for the given key.",
        "value": 2842
      },
      {
        "name": "map.set - set the value for the given key.",
        "value": 2842
      },
      {
        "name": "map.remove - remove the entry for given key.",
        "value": 2842
      },
      {
        "name": "map.clear - remove all entries.",
        "value": 2842
      },
      {
        "name": "map.keys - get the array of keys.",
        "value": 2842
      },
      {
        "name": "map.values - get the array of values.",
        "value": 2842
      },
      {
        "name": "map.entries - get the array of entries (key-values objects).",
        "value": 2842
      },
      {
        "name": "map.each - call a function for each entry.",
        "value": 2842
      },
      {
        "name": "map.empty - returns false if the map has at least one entry.",
        "value": 2842
      },
      {
        "name": "map.size - compute the number of entries.",
        "value": 2842
      },
      {
        "name": "d3.set - create a new, empty set.",
        "value": 2842
      },
      {
        "name": "set.has - returns true if the set contains the given value.",
        "value": 2842
      },
      {
        "name": "set.add - add the given value.",
        "value": 2842
      },
      {
        "name": "set.remove - remove the given value.",
        "value": 2842
      },
      {
        "name": "set.clear - remove all values.",
        "value": 2842
      },
      {
        "name": "set.values - get the array of values.",
        "value": 2842
      },
      {
        "name": "set.each - call a function for each value.",
        "value": 2842
      },
      {
        "name": "set.empty - returns true if the set has at least one value.",
        "value": 2842
      },
      {
        "name": "set.size - compute the number of values.",
        "value": 2842
      },
      {
        "name": "d3.nest - create a new nest generator.",
        "value": 2842
      },
      {
        "name": "nest.key - add a level to the nest hierarchy.",
        "value": 2842
      },
      {
        "name": "nest.sortKeys - sort the current nest level by key.",
        "value": 2842
      },
      {
        "name": "nest.sortValues - sort the leaf nest level by value.",
        "value": 2842
      },
      {
        "name": "nest.rollup - specify a rollup function for leaf values.",
        "value": 2842
      },
      {
        "name": "nest.map - generate the nest, returning a map.",
        "value": 2842
      },
      {
        "name": "nest.object - generate the nest, returning an associative array.",
        "value": 2842
      },
      {
        "name": "nest.entries - generate the nest, returning an array of key-values tuples.",
        "value": 2842
      }
    ]
  },
  {
    "title": "Random",
    "repo": "d3-random",
    "items": [
      {
        "title": "d3.randomUniform - from a uniform distribution.",
        "subCategory": null
      },
      {
        "title": "d3.randomNormal - from a normal distribution.",
        "subCategory": null
      },
      {
        "title": "d3.randomLogNormal - from a log-normal distribution.",
        "subCategory": null
      },
      {
        "title": "d3.randomBates - from a Bates distribution.",
        "subCategory": null
      },
      {
        "title": "d3.randomIrwinHall - from an Irwin–Hall distribution.",
        "subCategory": null
      },
      {
        "title": "d3.randomExponential - from an exponential distribution.",
        "subCategory": null
      },
      {
        "title": "random.source - set the source of randomness.",
        "subCategory": null
      }
    ],
    "name": "d3-random",
    "size": 1298,
    "children": [
      {
        "name": "d3.randomUniform - from a uniform distribution.",
        "value": 1298
      },
      {
        "name": "d3.randomNormal - from a normal distribution.",
        "value": 1298
      },
      {
        "name": "d3.randomLogNormal - from a log-normal distribution.",
        "value": 1298
      },
      {
        "name": "d3.randomBates - from a Bates distribution.",
        "value": 1298
      },
      {
        "name": "d3.randomIrwinHall - from an Irwin–Hall distribution.",
        "value": 1298
      },
      {
        "name": "d3.randomExponential - from an exponential distribution.",
        "value": 1298
      },
      {
        "name": "random.source - set the source of randomness.",
        "value": 1298
      }
    ]
  },
  {
    "title": "Arrays",
    "repo": "d3-array",
    "items": [
      {
        "title": "d3.min - compute the minimum value in an array.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.max - compute the maximum value in an array.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.extent - compute the minimum and maximum value in an array.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.sum - compute the sum of an array of numbers.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.mean - compute the arithmetic mean of an array of numbers.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.median - compute the median of an array of numbers (the 0.5-quantile).",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.quantile - compute a quantile for a sorted array of numbers.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.variance - compute the variance of an array of numbers.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.deviation - compute the standard deviation of an array of numbers.",
        "subCategory": "Statistics"
      },
      {
        "title": "d3.scan - linear search for an element using a comparator.",
        "subCategory": "Search"
      },
      {
        "title": "d3.bisect - binary search for a value in a sorted array.",
        "subCategory": "Search"
      },
      {
        "title": "d3.bisectRight - binary search for a value in a sorted array.",
        "subCategory": "Search"
      },
      {
        "title": "d3.bisectLeft - binary search for a value in a sorted array.",
        "subCategory": "Search"
      },
      {
        "title": "d3.bisector - bisect using an accessor or comparator.",
        "subCategory": "Search"
      },
      {
        "title": "bisector.left - bisectLeft, with the given comparator.",
        "subCategory": "Search"
      },
      {
        "title": "bisector.right - bisectRight, with the given comparator.",
        "subCategory": "Search"
      },
      {
        "title": "d3.ascending - compute the natural order of two values.",
        "subCategory": "Search"
      },
      {
        "title": "d3.descending - compute the natural order of two values.",
        "subCategory": "Search"
      },
      {
        "title": "d3.cross - compute the Cartesian product of two arrays.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.merge - merge multiple arrays into one array.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.pairs - create an array of adjacent pairs of elements.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.permute - reorder an array of elements according to an array of indexes.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.shuffle - randomize the order of an array.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.ticks - generate representative values from a numeric interval.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.tickIncrement - generate representative values from a numeric interval.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.tickStep - generate representative values from a numeric interval.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.range - generate a range of numeric values.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.transpose - transpose an array of arrays.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.zip - transpose a variable number of arrays.",
        "subCategory": "Transformations"
      },
      {
        "title": "d3.histogram - create a new histogram generator.",
        "subCategory": "Histograms"
      },
      {
        "title": "histogram - compute the histogram for the given array of samples.",
        "subCategory": "Histograms"
      },
      {
        "title": "histogram.value - specify a value accessor for each sample.",
        "subCategory": "Histograms"
      },
      {
        "title": "histogram.domain - specify the interval of observable values.",
        "subCategory": "Histograms"
      },
      {
        "title": "histogram.thresholds - specify how values are divided into bins.",
        "subCategory": "Histograms"
      },
      {
        "title": "d3.thresholdFreedmanDiaconis - the Freedman–Diaconis binning rule.",
        "subCategory": "Histograms"
      },
      {
        "title": "d3.thresholdScott - Scott’s normal reference binning rule.",
        "subCategory": "Histograms"
      },
      {
        "title": "d3.thresholdSturges - Sturges’ binning formula.",
        "subCategory": "Histograms"
      }
    ],
    "name": "d3-array",
    "size": 7780,
    "children": [
      {
        "name": "d3.min - compute the minimum value in an array.",
        "value": 7780
      },
      {
        "name": "d3.max - compute the maximum value in an array.",
        "value": 7780
      },
      {
        "name": "d3.extent - compute the minimum and maximum value in an array.",
        "value": 7780
      },
      {
        "name": "d3.sum - compute the sum of an array of numbers.",
        "value": 7780
      },
      {
        "name": "d3.mean - compute the arithmetic mean of an array of numbers.",
        "value": 7780
      },
      {
        "name": "d3.median - compute the median of an array of numbers (the 0.5-quantile).",
        "value": 7780
      },
      {
        "name": "d3.quantile - compute a quantile for a sorted array of numbers.",
        "value": 7780
      },
      {
        "name": "d3.variance - compute the variance of an array of numbers.",
        "value": 7780
      },
      {
        "name": "d3.deviation - compute the standard deviation of an array of numbers.",
        "value": 7780
      },
      {
        "name": "d3.scan - linear search for an element using a comparator.",
        "value": 7780
      },
      {
        "name": "d3.bisect - binary search for a value in a sorted array.",
        "value": 7780
      },
      {
        "name": "d3.bisectRight - binary search for a value in a sorted array.",
        "value": 7780
      },
      {
        "name": "d3.bisectLeft - binary search for a value in a sorted array.",
        "value": 7780
      },
      {
        "name": "d3.bisector - bisect using an accessor or comparator.",
        "value": 7780
      },
      {
        "name": "bisector.left - bisectLeft, with the given comparator.",
        "value": 7780
      },
      {
        "name": "bisector.right - bisectRight, with the given comparator.",
        "value": 7780
      },
      {
        "name": "d3.ascending - compute the natural order of two values.",
        "value": 7780
      },
      {
        "name": "d3.descending - compute the natural order of two values.",
        "value": 7780
      },
      {
        "name": "d3.cross - compute the Cartesian product of two arrays.",
        "value": 7780
      },
      {
        "name": "d3.merge - merge multiple arrays into one array.",
        "value": 7780
      },
      {
        "name": "d3.pairs - create an array of adjacent pairs of elements.",
        "value": 7780
      },
      {
        "name": "d3.permute - reorder an array of elements according to an array of indexes.",
        "value": 7780
      },
      {
        "name": "d3.shuffle - randomize the order of an array.",
        "value": 7780
      },
      {
        "name": "d3.ticks - generate representative values from a numeric interval.",
        "value": 7780
      },
      {
        "name": "d3.tickIncrement - generate representative values from a numeric interval.",
        "value": 7780
      },
      {
        "name": "d3.tickStep - generate representative values from a numeric interval.",
        "value": 7780
      },
      {
        "name": "d3.range - generate a range of numeric values.",
        "value": 7780
      },
      {
        "name": "d3.transpose - transpose an array of arrays.",
        "value": 7780
      },
      {
        "name": "d3.zip - transpose a variable number of arrays.",
        "value": 7780
      },
      {
        "name": "d3.histogram - create a new histogram generator.",
        "value": 7780
      },
      {
        "name": "histogram - compute the histogram for the given array of samples.",
        "value": 7780
      },
      {
        "name": "histogram.value - specify a value accessor for each sample.",
        "value": 7780
      },
      {
        "name": "histogram.domain - specify the interval of observable values.",
        "value": 7780
      },
      {
        "name": "histogram.thresholds - specify how values are divided into bins.",
        "value": 7780
      },
      {
        "name": "d3.thresholdFreedmanDiaconis - the Freedman–Diaconis binning rule.",
        "value": 7780
      },
      {
        "name": "d3.thresholdScott - Scott’s normal reference binning rule.",
        "value": 7780
      },
      {
        "name": "d3.thresholdSturges - Sturges’ binning formula.",
        "value": 7780
      }
    ]
  },
  {
    "title": "Interpolators",
    "repo": "d3-interpolate",
    "items": [
      {
        "title": "d3.interpolate - interpolate arbitrary values.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateArray - interpolate arrays of arbitrary values.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateDate - interpolate dates.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateNumber - interpolate numbers.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateObject - interpolate arbitrary objects.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateRound - interpolate integers.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateString - interpolate strings with embedded numbers.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateTransformCss - interpolate 2D CSS transforms.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateTransformSvg - interpolate 2D SVG transforms.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateZoom - zoom and pan between two views.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateRgb - interpolate RGB colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateRgbBasis - generate a B-spline through a set of colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateHsl - interpolate HSL colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateHslLong - interpolate HSL colors, the long way.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateLab - interpolate Lab colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateHcl - interpolate HCL colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateHclLong - interpolate HCL colors, the long way.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateCubehelix - interpolate Cubehelix colors.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.",
        "subCategory": null
      },
      {
        "title": "interpolate.gamma - apply gamma correction during interpolation.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateHue - interpolate a hue angle.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateDiscrete - generate a discrete interpolator from a set of values.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateBasis - generate a B-spline through a set of values.",
        "subCategory": null
      },
      {
        "title": "d3.interpolateBasisClosed - generate a closed B-spline through a set of values.",
        "subCategory": null
      },
      {
        "title": "d3.piecewise - generate a piecewise linear interpolator from a set of values.",
        "subCategory": null
      },
      {
        "title": "d3.quantize - generate uniformly-spaced samples from an interpolator.",
        "subCategory": null
      }
    ],
    "name": "d3-interpolate",
    "size": 7557,
    "children": [
      {
        "name": "d3.interpolate - interpolate arbitrary values.",
        "value": 7557
      },
      {
        "name": "d3.interpolateArray - interpolate arrays of arbitrary values.",
        "value": 7557
      },
      {
        "name": "d3.interpolateDate - interpolate dates.",
        "value": 7557
      },
      {
        "name": "d3.interpolateNumber - interpolate numbers.",
        "value": 7557
      },
      {
        "name": "d3.interpolateObject - interpolate arbitrary objects.",
        "value": 7557
      },
      {
        "name": "d3.interpolateRound - interpolate integers.",
        "value": 7557
      },
      {
        "name": "d3.interpolateString - interpolate strings with embedded numbers.",
        "value": 7557
      },
      {
        "name": "d3.interpolateTransformCss - interpolate 2D CSS transforms.",
        "value": 7557
      },
      {
        "name": "d3.interpolateTransformSvg - interpolate 2D SVG transforms.",
        "value": 7557
      },
      {
        "name": "d3.interpolateZoom - zoom and pan between two views.",
        "value": 7557
      },
      {
        "name": "d3.interpolateRgb - interpolate RGB colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateRgbBasis - generate a B-spline through a set of colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateHsl - interpolate HSL colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateHslLong - interpolate HSL colors, the long way.",
        "value": 7557
      },
      {
        "name": "d3.interpolateLab - interpolate Lab colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateHcl - interpolate HCL colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateHclLong - interpolate HCL colors, the long way.",
        "value": 7557
      },
      {
        "name": "d3.interpolateCubehelix - interpolate Cubehelix colors.",
        "value": 7557
      },
      {
        "name": "d3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.",
        "value": 7557
      },
      {
        "name": "interpolate.gamma - apply gamma correction during interpolation.",
        "value": 7557
      },
      {
        "name": "d3.interpolateHue - interpolate a hue angle.",
        "value": 7557
      },
      {
        "name": "d3.interpolateDiscrete - generate a discrete interpolator from a set of values.",
        "value": 7557
      },
      {
        "name": "d3.interpolateBasis - generate a B-spline through a set of values.",
        "value": 7557
      },
      {
        "name": "d3.interpolateBasisClosed - generate a closed B-spline through a set of values.",
        "value": 7557
      },
      {
        "name": "d3.piecewise - generate a piecewise linear interpolator from a set of values.",
        "value": 7557
      },
      {
        "name": "d3.quantize - generate uniformly-spaced samples from an interpolator.",
        "value": 7557
      }
    ]
  },
  {
    "title": "Contours",
    "repo": "d3-contour",
    "items": [
      {
        "title": "d3.contours - create a new contour generator.",
        "subCategory": null
      },
      {
        "title": "contours - compute the contours for a given grid of values.",
        "subCategory": null
      },
      {
        "title": "contours.contour -",
        "subCategory": null
      },
      {
        "title": "contours.size -",
        "subCategory": null
      },
      {
        "title": "contours.smooth -",
        "subCategory": null
      },
      {
        "title": "contours.thresholds -",
        "subCategory": null
      },
      {
        "title": "d3.contourDensity - create a new density estimator.",
        "subCategory": null
      },
      {
        "title": "density - estimate the density of a given array of samples.",
        "subCategory": null
      },
      {
        "title": "density.x -",
        "subCategory": null
      },
      {
        "title": "density.y -",
        "subCategory": null
      },
      {
        "title": "density.cellSize -",
        "subCategory": null
      },
      {
        "title": "density.thresholds -",
        "subCategory": null
      },
      {
        "title": "density.bandwidth -",
        "subCategory": null
      },
      {
        "title": "density.weight -",
        "subCategory": null
      }
    ],
    "name": "d3-contour",
    "size": 5822,
    "children": [
      {
        "name": "d3.contours - create a new contour generator.",
        "value": 5822
      },
      {
        "name": "contours - compute the contours for a given grid of values.",
        "value": 5822
      },
      {
        "name": "contours.contour -",
        "value": 5822
      },
      {
        "name": "contours.size -",
        "value": 5822
      },
      {
        "name": "contours.smooth -",
        "value": 5822
      },
      {
        "name": "contours.thresholds -",
        "value": 5822
      },
      {
        "name": "d3.contourDensity - create a new density estimator.",
        "value": 5822
      },
      {
        "name": "density - estimate the density of a given array of samples.",
        "value": 5822
      },
      {
        "name": "density.x -",
        "value": 5822
      },
      {
        "name": "density.y -",
        "value": 5822
      },
      {
        "name": "density.cellSize -",
        "value": 5822
      },
      {
        "name": "density.thresholds -",
        "value": 5822
      },
      {
        "name": "density.bandwidth -",
        "value": 5822
      },
      {
        "name": "density.weight -",
        "value": 5822
      }
    ]
  },
  {
    "title": "Time Intervals",
    "repo": "d3-time",
    "items": [
      {
        "title": "d3.timeInterval - implement a new custom time interval.",
        "subCategory": null
      },
      {
        "title": "interval - alias for interval.floor.",
        "subCategory": null
      },
      {
        "title": "interval.floor - round down to the nearest boundary.",
        "subCategory": null
      },
      {
        "title": "interval.round - round to the nearest boundary.",
        "subCategory": null
      },
      {
        "title": "interval.ceil - round up to the nearest boundary.",
        "subCategory": null
      },
      {
        "title": "interval.offset - offset a date by some number of intervals.",
        "subCategory": null
      },
      {
        "title": "interval.range - generate a range of dates at interval boundaries.",
        "subCategory": null
      },
      {
        "title": "interval.filter - create a filtered subset of this interval.",
        "subCategory": null
      },
      {
        "title": "interval.every - create a filtered subset of this interval.",
        "subCategory": null
      },
      {
        "title": "interval.count - count interval boundaries between two dates.",
        "subCategory": null
      },
      {
        "title": "d3.timeMillisecond, d3.utcMillisecond - the millisecond interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeSecond, d3.utcSecond - the second interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeSeconds, d3.utcSeconds - aliases for second.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeMinute, d3.utcMinute - the minute interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeMinutes, d3.utcMinutes - aliases for minute.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeHour, d3.utcHour - the hour interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeHours, d3.utcHours - aliases for hour.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeDay, d3.utcDay - the day interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeDays, d3.utcDays - aliases for day.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeWeek, d3.utcWeek - aliases for sunday.",
        "subCategory": null
      },
      {
        "title": "d3.timeWeeks, d3.utcWeeks - aliases for week.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.",
        "subCategory": null
      },
      {
        "title": "d3.timeSundays, d3.utcSundays - aliases for sunday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeMonday, d3.utcMonday - the week interval, starting on Monday.",
        "subCategory": null
      },
      {
        "title": "d3.timeMondays, d3.utcMondays - aliases for monday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.",
        "subCategory": null
      },
      {
        "title": "d3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.",
        "subCategory": null
      },
      {
        "title": "d3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.",
        "subCategory": null
      },
      {
        "title": "d3.timeThursdays, d3.utcThursdays - aliases for thursday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeFriday, d3.utcFriday - the week interval, starting on Friday.",
        "subCategory": null
      },
      {
        "title": "d3.timeFridays, d3.utcFridays - aliases for friday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.",
        "subCategory": null
      },
      {
        "title": "d3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeMonth, d3.utcMonth - the month interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeMonths, d3.utcMonths - aliases for month.range.",
        "subCategory": null
      },
      {
        "title": "d3.timeYear, d3.utcYear - the year interval.",
        "subCategory": null
      },
      {
        "title": "d3.timeYears, d3.utcYears - aliases for year.range.",
        "subCategory": null
      }
    ],
    "name": "d3-time",
    "size": 5644,
    "children": [
      {
        "name": "d3.timeInterval - implement a new custom time interval.",
        "value": 5644
      },
      {
        "name": "interval - alias for interval.floor.",
        "value": 5644
      },
      {
        "name": "interval.floor - round down to the nearest boundary.",
        "value": 5644
      },
      {
        "name": "interval.round - round to the nearest boundary.",
        "value": 5644
      },
      {
        "name": "interval.ceil - round up to the nearest boundary.",
        "value": 5644
      },
      {
        "name": "interval.offset - offset a date by some number of intervals.",
        "value": 5644
      },
      {
        "name": "interval.range - generate a range of dates at interval boundaries.",
        "value": 5644
      },
      {
        "name": "interval.filter - create a filtered subset of this interval.",
        "value": 5644
      },
      {
        "name": "interval.every - create a filtered subset of this interval.",
        "value": 5644
      },
      {
        "name": "interval.count - count interval boundaries between two dates.",
        "value": 5644
      },
      {
        "name": "d3.timeMillisecond, d3.utcMillisecond - the millisecond interval.",
        "value": 5644
      },
      {
        "name": "d3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.",
        "value": 5644
      },
      {
        "name": "d3.timeSecond, d3.utcSecond - the second interval.",
        "value": 5644
      },
      {
        "name": "d3.timeSeconds, d3.utcSeconds - aliases for second.range.",
        "value": 5644
      },
      {
        "name": "d3.timeMinute, d3.utcMinute - the minute interval.",
        "value": 5644
      },
      {
        "name": "d3.timeMinutes, d3.utcMinutes - aliases for minute.range.",
        "value": 5644
      },
      {
        "name": "d3.timeHour, d3.utcHour - the hour interval.",
        "value": 5644
      },
      {
        "name": "d3.timeHours, d3.utcHours - aliases for hour.range.",
        "value": 5644
      },
      {
        "name": "d3.timeDay, d3.utcDay - the day interval.",
        "value": 5644
      },
      {
        "name": "d3.timeDays, d3.utcDays - aliases for day.range.",
        "value": 5644
      },
      {
        "name": "d3.timeWeek, d3.utcWeek - aliases for sunday.",
        "value": 5644
      },
      {
        "name": "d3.timeWeeks, d3.utcWeeks - aliases for week.range.",
        "value": 5644
      },
      {
        "name": "d3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.",
        "value": 5644
      },
      {
        "name": "d3.timeSundays, d3.utcSundays - aliases for sunday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeMonday, d3.utcMonday - the week interval, starting on Monday.",
        "value": 5644
      },
      {
        "name": "d3.timeMondays, d3.utcMondays - aliases for monday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.",
        "value": 5644
      },
      {
        "name": "d3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.",
        "value": 5644
      },
      {
        "name": "d3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.",
        "value": 5644
      },
      {
        "name": "d3.timeThursdays, d3.utcThursdays - aliases for thursday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeFriday, d3.utcFriday - the week interval, starting on Friday.",
        "value": 5644
      },
      {
        "name": "d3.timeFridays, d3.utcFridays - aliases for friday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.",
        "value": 5644
      },
      {
        "name": "d3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.",
        "value": 5644
      },
      {
        "name": "d3.timeMonth, d3.utcMonth - the month interval.",
        "value": 5644
      },
      {
        "name": "d3.timeMonths, d3.utcMonths - aliases for month.range.",
        "value": 5644
      },
      {
        "name": "d3.timeYear, d3.utcYear - the year interval.",
        "value": 5644
      },
      {
        "name": "d3.timeYears, d3.utcYears - aliases for year.range.",
        "value": 5644
      }
    ]
  },
  {
    "title": "Sankey",
    "repo": "d3-sankey",
    "url": "https://unpkg.com/d3-sankey@0",
    "items": [],
    "name": "d3-sankey",
    "size": 5496,
    "children": []
  },
  {
    "title": "Quadtrees",
    "repo": "d3-quadtree",
    "items": [
      {
        "title": "d3.quadtree - create a new, empty quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.x - set the x accessor.",
        "subCategory": null
      },
      {
        "title": "quadtree.y - set the y accessor.",
        "subCategory": null
      },
      {
        "title": "quadtree.add - add a datum to a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.addAll - add an array of data to a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.remove - remove a datum from a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.removeAll - remove an array of data from a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.copy - create a copy of a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.root - get the quadtree’s root node.",
        "subCategory": null
      },
      {
        "title": "quadtree.data - retrieve all data from the quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.size - count the number of data in the quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.find - quickly find the closest datum in a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.visit - selectively visit nodes in a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.visitAfter - visit all nodes in a quadtree.",
        "subCategory": null
      },
      {
        "title": "quadtree.cover - extend the quadtree to cover a point.",
        "subCategory": null
      },
      {
        "title": "quadtree.extent - extend the quadtree to cover an extent.",
        "subCategory": null
      }
    ],
    "name": "d3-quadtree",
    "size": 5211,
    "children": [
      {
        "name": "d3.quadtree - create a new, empty quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.x - set the x accessor.",
        "value": 5211
      },
      {
        "name": "quadtree.y - set the y accessor.",
        "value": 5211
      },
      {
        "name": "quadtree.add - add a datum to a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.addAll - add an array of data to a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.remove - remove a datum from a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.removeAll - remove an array of data from a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.copy - create a copy of a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.root - get the quadtree’s root node.",
        "value": 5211
      },
      {
        "name": "quadtree.data - retrieve all data from the quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.size - count the number of data in the quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.find - quickly find the closest datum in a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.visit - selectively visit nodes in a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.visitAfter - visit all nodes in a quadtree.",
        "value": 5211
      },
      {
        "name": "quadtree.cover - extend the quadtree to cover a point.",
        "value": 5211
      },
      {
        "name": "quadtree.extent - extend the quadtree to cover an extent.",
        "value": 5211
      }
    ]
  },
  {
    "title": "Number Formats",
    "repo": "d3-format",
    "items": [
      {
        "title": "d3.format - alias for locale.format on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.formatPrefix - alias for locale.formatPrefix on the default locale.",
        "subCategory": null
      },
      {
        "title": "d3.formatSpecifier - parse a number format specifier.",
        "subCategory": null
      },
      {
        "title": "d3.formatLocale - define a custom locale.",
        "subCategory": null
      },
      {
        "title": "d3.formatDefaultLocale - define the default locale.",
        "subCategory": null
      },
      {
        "title": "locale.format - create a number format.",
        "subCategory": null
      },
      {
        "title": "locale.formatPrefix - create a SI-prefix number format.",
        "subCategory": null
      },
      {
        "title": "d3.precisionFixed - compute decimal precision for fixed-point notation.",
        "subCategory": null
      },
      {
        "title": "d3.precisionPrefix - compute decimal precision for SI-prefix notation.",
        "subCategory": null
      },
      {
        "title": "d3.precisionRound - compute significant digits for rounded notation.",
        "subCategory": null
      }
    ],
    "name": "d3-format",
    "size": 4634,
    "children": [
      {
        "name": "d3.format - alias for locale.format on the default locale.",
        "value": 4634
      },
      {
        "name": "d3.formatPrefix - alias for locale.formatPrefix on the default locale.",
        "value": 4634
      },
      {
        "name": "d3.formatSpecifier - parse a number format specifier.",
        "value": 4634
      },
      {
        "name": "d3.formatLocale - define a custom locale.",
        "value": 4634
      },
      {
        "name": "d3.formatDefaultLocale - define the default locale.",
        "value": 4634
      },
      {
        "name": "locale.format - create a number format.",
        "value": 4634
      },
      {
        "name": "locale.formatPrefix - create a SI-prefix number format.",
        "value": 4634
      },
      {
        "name": "d3.precisionFixed - compute decimal precision for fixed-point notation.",
        "value": 4634
      },
      {
        "name": "d3.precisionPrefix - compute decimal precision for SI-prefix notation.",
        "value": 4634
      },
      {
        "name": "d3.precisionRound - compute significant digits for rounded notation.",
        "value": 4634
      }
    ]
  },
  {
    "title": "Dragging",
    "repo": "d3-drag",
    "items": [
      {
        "title": "d3.drag - create a drag behavior.",
        "subCategory": null
      },
      {
        "title": "drag - apply the drag behavior to a selection.",
        "subCategory": null
      },
      {
        "title": "drag.container - set the coordinate system.",
        "subCategory": null
      },
      {
        "title": "drag.filter - ignore some initiating input events.",
        "subCategory": null
      },
      {
        "title": "drag.touchable - set the touch support detector.",
        "subCategory": null
      },
      {
        "title": "drag.subject - set the thing being dragged.",
        "subCategory": null
      },
      {
        "title": "drag.clickDistance - set the click distance threshold.",
        "subCategory": null
      },
      {
        "title": "drag.on - listen for drag events.",
        "subCategory": null
      },
      {
        "title": "event.on - listen for drag events on the current gesture.",
        "subCategory": null
      },
      {
        "title": "d3.dragDisable - prevent native drag-and-drop and text selection.",
        "subCategory": null
      },
      {
        "title": "d3.dragEnable - enable native drag-and-drop and text selection.",
        "subCategory": null
      }
    ],
    "name": "d3-drag",
    "size": 3642,
    "children": [
      {
        "name": "d3.drag - create a drag behavior.",
        "value": 3642
      },
      {
        "name": "drag - apply the drag behavior to a selection.",
        "value": 3642
      },
      {
        "name": "drag.container - set the coordinate system.",
        "value": 3642
      },
      {
        "name": "drag.filter - ignore some initiating input events.",
        "value": 3642
      },
      {
        "name": "drag.touchable - set the touch support detector.",
        "value": 3642
      },
      {
        "name": "drag.subject - set the thing being dragged.",
        "value": 3642
      },
      {
        "name": "drag.clickDistance - set the click distance threshold.",
        "value": 3642
      },
      {
        "name": "drag.on - listen for drag events.",
        "value": 3642
      },
      {
        "name": "event.on - listen for drag events on the current gesture.",
        "value": 3642
      },
      {
        "name": "d3.dragDisable - prevent native drag-and-drop and text selection.",
        "value": 3642
      },
      {
        "name": "d3.dragEnable - enable native drag-and-drop and text selection.",
        "value": 3642
      }
    ]
  },
  {
    "title": "Easings",
    "repo": "d3-ease",
    "items": [
      {
        "title": "ease - ease the given normalized time.",
        "subCategory": null
      },
      {
        "title": "d3.easeLinear - linear easing; the identity function.",
        "subCategory": null
      },
      {
        "title": "d3.easePolyIn - polynomial easing; raises time to the given power.",
        "subCategory": null
      },
      {
        "title": "d3.easePolyOut - reverse polynomial easing.",
        "subCategory": null
      },
      {
        "title": "d3.easePolyInOut - symmetric polynomial easing.",
        "subCategory": null
      },
      {
        "title": "poly.exponent - specify the polynomial exponent.",
        "subCategory": null
      },
      {
        "title": "d3.easeQuad - an alias for easeQuadInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeQuadIn - quadratic easing; squares time.",
        "subCategory": null
      },
      {
        "title": "d3.easeQuadOut - reverse quadratic easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeQuadInOut - symmetric quadratic easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeCubic - an alias for easeCubicInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeCubicIn - cubic easing; cubes time.",
        "subCategory": null
      },
      {
        "title": "d3.easeCubicOut - reverse cubic easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeCubicInOut - symmetric cubic easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeSin - an alias for easeSinInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeSinIn - sinusoidal easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeSinOut - reverse sinusoidal easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeSinInOut - symmetric sinusoidal easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeExp - an alias for easeExpInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeExpIn - exponential easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeExpOut - reverse exponential easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeExpInOut - symmetric exponential easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeCircle - an alias for easeCircleInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeCircleIn - circular easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeCircleOut - reverse circular easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeCircleInOut - symmetric circular easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeElastic - an alias for easeElasticOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeElasticIn - elastic easing, like a rubber band.",
        "subCategory": null
      },
      {
        "title": "d3.easeElasticOut - reverse elastic easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeElasticInOut - symmetric elastic easing.",
        "subCategory": null
      },
      {
        "title": "elastic.amplitude - specify the elastic amplitude.",
        "subCategory": null
      },
      {
        "title": "elastic.period - specify the elastic period.",
        "subCategory": null
      },
      {
        "title": "d3.easeBack - an alias for easeBackInOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.",
        "subCategory": null
      },
      {
        "title": "d3.easeBackOut - reverse anticipatory easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeBackInOut - symmetric anticipatory easing.",
        "subCategory": null
      },
      {
        "title": "back.overshoot - specify the amount of overshoot.",
        "subCategory": null
      },
      {
        "title": "d3.easeBounce - an alias for easeBounceOut.",
        "subCategory": null
      },
      {
        "title": "d3.easeBounceIn - bounce easing, like a rubber ball.",
        "subCategory": null
      },
      {
        "title": "d3.easeBounceOut - reverse bounce easing.",
        "subCategory": null
      },
      {
        "title": "d3.easeBounceInOut - symmetric bounce easing.",
        "subCategory": null
      }
    ],
    "name": "d3-ease",
    "size": 3100,
    "children": [
      {
        "name": "ease - ease the given normalized time.",
        "value": 3100
      },
      {
        "name": "d3.easeLinear - linear easing; the identity function.",
        "value": 3100
      },
      {
        "name": "d3.easePolyIn - polynomial easing; raises time to the given power.",
        "value": 3100
      },
      {
        "name": "d3.easePolyOut - reverse polynomial easing.",
        "value": 3100
      },
      {
        "name": "d3.easePolyInOut - symmetric polynomial easing.",
        "value": 3100
      },
      {
        "name": "poly.exponent - specify the polynomial exponent.",
        "value": 3100
      },
      {
        "name": "d3.easeQuad - an alias for easeQuadInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeQuadIn - quadratic easing; squares time.",
        "value": 3100
      },
      {
        "name": "d3.easeQuadOut - reverse quadratic easing.",
        "value": 3100
      },
      {
        "name": "d3.easeQuadInOut - symmetric quadratic easing.",
        "value": 3100
      },
      {
        "name": "d3.easeCubic - an alias for easeCubicInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeCubicIn - cubic easing; cubes time.",
        "value": 3100
      },
      {
        "name": "d3.easeCubicOut - reverse cubic easing.",
        "value": 3100
      },
      {
        "name": "d3.easeCubicInOut - symmetric cubic easing.",
        "value": 3100
      },
      {
        "name": "d3.easeSin - an alias for easeSinInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeSinIn - sinusoidal easing.",
        "value": 3100
      },
      {
        "name": "d3.easeSinOut - reverse sinusoidal easing.",
        "value": 3100
      },
      {
        "name": "d3.easeSinInOut - symmetric sinusoidal easing.",
        "value": 3100
      },
      {
        "name": "d3.easeExp - an alias for easeExpInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeExpIn - exponential easing.",
        "value": 3100
      },
      {
        "name": "d3.easeExpOut - reverse exponential easing.",
        "value": 3100
      },
      {
        "name": "d3.easeExpInOut - symmetric exponential easing.",
        "value": 3100
      },
      {
        "name": "d3.easeCircle - an alias for easeCircleInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeCircleIn - circular easing.",
        "value": 3100
      },
      {
        "name": "d3.easeCircleOut - reverse circular easing.",
        "value": 3100
      },
      {
        "name": "d3.easeCircleInOut - symmetric circular easing.",
        "value": 3100
      },
      {
        "name": "d3.easeElastic - an alias for easeElasticOut.",
        "value": 3100
      },
      {
        "name": "d3.easeElasticIn - elastic easing, like a rubber band.",
        "value": 3100
      },
      {
        "name": "d3.easeElasticOut - reverse elastic easing.",
        "value": 3100
      },
      {
        "name": "d3.easeElasticInOut - symmetric elastic easing.",
        "value": 3100
      },
      {
        "name": "elastic.amplitude - specify the elastic amplitude.",
        "value": 3100
      },
      {
        "name": "elastic.period - specify the elastic period.",
        "value": 3100
      },
      {
        "name": "d3.easeBack - an alias for easeBackInOut.",
        "value": 3100
      },
      {
        "name": "d3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.",
        "value": 3100
      },
      {
        "name": "d3.easeBackOut - reverse anticipatory easing.",
        "value": 3100
      },
      {
        "name": "d3.easeBackInOut - symmetric anticipatory easing.",
        "value": 3100
      },
      {
        "name": "back.overshoot - specify the amount of overshoot.",
        "value": 3100
      },
      {
        "name": "d3.easeBounce - an alias for easeBounceOut.",
        "value": 3100
      },
      {
        "name": "d3.easeBounceIn - bounce easing, like a rubber ball.",
        "value": 3100
      },
      {
        "name": "d3.easeBounceOut - reverse bounce easing.",
        "value": 3100
      },
      {
        "name": "d3.easeBounceInOut - symmetric bounce easing.",
        "value": 3100
      }
    ]
  },
  {
    "title": "Fetches",
    "repo": "d3-fetch",
    "items": [
      {
        "title": "d3.blob - get a file as a blob.",
        "subCategory": null
      },
      {
        "title": "d3.buffer - get a file as an array buffer.",
        "subCategory": null
      },
      {
        "title": "d3.csv - get a comma-separated values (CSV) file.",
        "subCategory": null
      },
      {
        "title": "d3.dsv - get a delimiter-separated values (CSV) file.",
        "subCategory": null
      },
      {
        "title": "d3.image - get an image.",
        "subCategory": null
      },
      {
        "title": "d3.json - get a JSON file.",
        "subCategory": null
      },
      {
        "title": "d3.text - get a plain text file.",
        "subCategory": null
      },
      {
        "title": "d3.tsv - get a tab-separated values (TSV) file.",
        "subCategory": null
      }
    ],
    "name": "d3-fetch",
    "size": 1571,
    "children": [
      {
        "name": "d3.blob - get a file as a blob.",
        "value": 1571
      },
      {
        "name": "d3.buffer - get a file as an array buffer.",
        "value": 1571
      },
      {
        "name": "d3.csv - get a comma-separated values (CSV) file.",
        "value": 1571
      },
      {
        "name": "d3.dsv - get a delimiter-separated values (CSV) file.",
        "value": 1571
      },
      {
        "name": "d3.image - get an image.",
        "value": 1571
      },
      {
        "name": "d3.json - get a JSON file.",
        "value": 1571
      },
      {
        "name": "d3.text - get a plain text file.",
        "value": 1571
      },
      {
        "name": "d3.tsv - get a tab-separated values (TSV) file.",
        "value": 1571
      }
    ]
  },
  {
    "title": "Dsv",
    "repo": "d3-dsv",
    "items": [
      {
        "title": "d3.dsvFormat - create a new parser and formatter for the given delimiter.",
        "subCategory": null
      },
      {
        "title": "dsv.parse - parse the given string, returning an array of objects.",
        "subCategory": null
      },
      {
        "title": "dsv.parseRows - parse the given string, returning an array of rows.",
        "subCategory": null
      },
      {
        "title": "dsv.format - format the given array of objects.",
        "subCategory": null
      },
      {
        "title": "dsv.formatRows - format the given array of rows.",
        "subCategory": null
      },
      {
        "title": "d3.csvParse - parse the given CSV string, returning an array of objects.",
        "subCategory": null
      },
      {
        "title": "d3.csvParseRows - parse the given CSV string, returning an array of rows.",
        "subCategory": null
      },
      {
        "title": "d3.csvFormat - format the given array of objects as CSV.",
        "subCategory": null
      },
      {
        "title": "d3.csvFormatRows - format the given array of rows as CSV.",
        "subCategory": null
      },
      {
        "title": "d3.tsvParse - parse the given TSV string, returning an array of objects.",
        "subCategory": null
      },
      {
        "title": "d3.tsvParseRows - parse the given TSV string, returning an array of rows.",
        "subCategory": null
      },
      {
        "title": "d3.tsvFormat - format the given array of objects as TSV.",
        "subCategory": null
      },
      {
        "title": "d3.tsvFormatRows - format the given array of rows as TSV.",
        "subCategory": null
      }
    ],
    "name": "d3-dsv",
    "size": 3019,
    "children": [
      {
        "name": "d3.dsvFormat - create a new parser and formatter for the given delimiter.",
        "value": 3019
      },
      {
        "name": "dsv.parse - parse the given string, returning an array of objects.",
        "value": 3019
      },
      {
        "name": "dsv.parseRows - parse the given string, returning an array of rows.",
        "value": 3019
      },
      {
        "name": "dsv.format - format the given array of objects.",
        "value": 3019
      },
      {
        "name": "dsv.formatRows - format the given array of rows.",
        "value": 3019
      },
      {
        "name": "d3.csvParse - parse the given CSV string, returning an array of objects.",
        "value": 3019
      },
      {
        "name": "d3.csvParseRows - parse the given CSV string, returning an array of rows.",
        "value": 3019
      },
      {
        "name": "d3.csvFormat - format the given array of objects as CSV.",
        "value": 3019
      },
      {
        "name": "d3.csvFormatRows - format the given array of rows as CSV.",
        "value": 3019
      },
      {
        "name": "d3.tsvParse - parse the given TSV string, returning an array of objects.",
        "value": 3019
      },
      {
        "name": "d3.tsvParseRows - parse the given TSV string, returning an array of rows.",
        "value": 3019
      },
      {
        "name": "d3.tsvFormat - format the given array of objects as TSV.",
        "value": 3019
      },
      {
        "name": "d3.tsvFormatRows - format the given array of rows as TSV.",
        "value": 3019
      }
    ]
  },
  {
    "title": "Require",
    "repo": "d3-require",
    "url": "https://cdn.jsdelivr.net/npm/d3-require@1",
    "items": [],
    "name": "d3-require",
    "size": 2986,
    "children": []
  },
  {
    "title": "Axes",
    "repo": "d3-axis",
    "items": [
      {
        "title": "d3.axisTop - create a new top-oriented axis generator.",
        "subCategory": null
      },
      {
        "title": "d3.axisRight - create a new right-oriented axis generator.",
        "subCategory": null
      },
      {
        "title": "d3.axisBottom - create a new bottom-oriented axis generator.",
        "subCategory": null
      },
      {
        "title": "d3.axisLeft - create a new left-oriented axis generator.",
        "subCategory": null
      },
      {
        "title": "axis - generate an axis for the given selection.",
        "subCategory": null
      },
      {
        "title": "axis.scale - set the scale.",
        "subCategory": null
      },
      {
        "title": "axis.ticks - customize how ticks are generated and formatted.",
        "subCategory": null
      },
      {
        "title": "axis.tickArguments - customize how ticks are generated and formatted.",
        "subCategory": null
      },
      {
        "title": "axis.tickValues - set the tick values explicitly.",
        "subCategory": null
      },
      {
        "title": "axis.tickFormat - set the tick format explicitly.",
        "subCategory": null
      },
      {
        "title": "axis.tickSize - set the size of the ticks.",
        "subCategory": null
      },
      {
        "title": "axis.tickSizeInner - set the size of inner ticks.",
        "subCategory": null
      },
      {
        "title": "axis.tickSizeOuter - set the size of outer (extent) ticks.",
        "subCategory": null
      },
      {
        "title": "axis.tickPadding - set the padding between ticks and labels.",
        "subCategory": null
      }
    ],
    "name": "d3-axis",
    "size": 2985,
    "children": [
      {
        "name": "d3.axisTop - create a new top-oriented axis generator.",
        "value": 2985
      },
      {
        "name": "d3.axisRight - create a new right-oriented axis generator.",
        "value": 2985
      },
      {
        "name": "d3.axisBottom - create a new bottom-oriented axis generator.",
        "value": 2985
      },
      {
        "name": "d3.axisLeft - create a new left-oriented axis generator.",
        "value": 2985
      },
      {
        "name": "axis - generate an axis for the given selection.",
        "value": 2985
      },
      {
        "name": "axis.scale - set the scale.",
        "value": 2985
      },
      {
        "name": "axis.ticks - customize how ticks are generated and formatted.",
        "value": 2985
      },
      {
        "name": "axis.tickArguments - customize how ticks are generated and formatted.",
        "value": 2985
      },
      {
        "name": "axis.tickValues - set the tick values explicitly.",
        "value": 2985
      },
      {
        "name": "axis.tickFormat - set the tick format explicitly.",
        "value": 2985
      },
      {
        "name": "axis.tickSize - set the size of the ticks.",
        "value": 2985
      },
      {
        "name": "axis.tickSizeInner - set the size of inner ticks.",
        "value": 2985
      },
      {
        "name": "axis.tickSizeOuter - set the size of outer (extent) ticks.",
        "value": 2985
      },
      {
        "name": "axis.tickPadding - set the padding between ticks and labels.",
        "value": 2985
      }
    ]
  },
  {
    "title": "Chords",
    "repo": "d3-chord",
    "items": [
      {
        "title": "d3.chord - create a new chord layout.",
        "subCategory": null
      },
      {
        "title": "chord - compute the layout for the given matrix.",
        "subCategory": null
      },
      {
        "title": "chord.padAngle - set the padding between adjacent groups.",
        "subCategory": null
      },
      {
        "title": "chord.sortGroups - define the group order.",
        "subCategory": null
      },
      {
        "title": "chord.sortSubgroups - define the source and target order within groups.",
        "subCategory": null
      },
      {
        "title": "chord.sortChords - define the chord order across groups.",
        "subCategory": null
      },
      {
        "title": "d3.ribbon - create a ribbon shape generator.",
        "subCategory": null
      },
      {
        "title": "ribbon - generate a ribbon shape.",
        "subCategory": null
      },
      {
        "title": "ribbon.source - set the source accessor.",
        "subCategory": null
      },
      {
        "title": "ribbon.target - set the target accessor.",
        "subCategory": null
      },
      {
        "title": "ribbon.radius - set the ribbon source or target radius.",
        "subCategory": null
      },
      {
        "title": "ribbon.startAngle - set the ribbon source or target start angle.",
        "subCategory": null
      },
      {
        "title": "ribbon.endAngle - set the ribbon source or target end angle.",
        "subCategory": null
      },
      {
        "title": "ribbon.context - set the render context.",
        "subCategory": null
      }
    ],
    "name": "d3-chord",
    "size": 2718,
    "children": [
      {
        "name": "d3.chord - create a new chord layout.",
        "value": 2718
      },
      {
        "name": "chord - compute the layout for the given matrix.",
        "value": 2718
      },
      {
        "name": "chord.padAngle - set the padding between adjacent groups.",
        "value": 2718
      },
      {
        "name": "chord.sortGroups - define the group order.",
        "value": 2718
      },
      {
        "name": "chord.sortSubgroups - define the source and target order within groups.",
        "value": 2718
      },
      {
        "name": "chord.sortChords - define the chord order across groups.",
        "value": 2718
      },
      {
        "name": "d3.ribbon - create a ribbon shape generator.",
        "value": 2718
      },
      {
        "name": "ribbon - generate a ribbon shape.",
        "value": 2718
      },
      {
        "name": "ribbon.source - set the source accessor.",
        "value": 2718
      },
      {
        "name": "ribbon.target - set the target accessor.",
        "value": 2718
      },
      {
        "name": "ribbon.radius - set the ribbon source or target radius.",
        "value": 2718
      },
      {
        "name": "ribbon.startAngle - set the ribbon source or target start angle.",
        "value": 2718
      },
      {
        "name": "ribbon.endAngle - set the ribbon source or target end angle.",
        "value": 2718
      },
      {
        "name": "ribbon.context - set the render context.",
        "value": 2718
      }
    ]
  },
  {
    "title": "Tile",
    "repo": "d3-tile",
    "url": "https://unpkg.com/d3-tile@0.0",
    "items": [],
    "name": "d3-tile",
    "size": 2383,
    "children": []
  },
  {
    "title": "Paths",
    "repo": "d3-path",
    "items": [
      {
        "title": "d3.path - create a new path serializer.",
        "subCategory": null
      },
      {
        "title": "path.moveTo - move to the given point.",
        "subCategory": null
      },
      {
        "title": "path.closePath - close the current subpath.",
        "subCategory": null
      },
      {
        "title": "path.lineTo - draw a straight line segment.",
        "subCategory": null
      },
      {
        "title": "path.quadraticCurveTo - draw a quadratic Bézier segment.",
        "subCategory": null
      },
      {
        "title": "path.bezierCurveTo - draw a cubic Bézier segment.",
        "subCategory": null
      },
      {
        "title": "path.arcTo - draw a circular arc segment.",
        "subCategory": null
      },
      {
        "title": "path.arc - draw a circular arc segment.",
        "subCategory": null
      },
      {
        "title": "path.rect - draw a rectangle.",
        "subCategory": null
      },
      {
        "title": "path.toString - serialize to an SVG path data string.",
        "subCategory": null
      }
    ],
    "name": "d3-path",
    "size": 2156,
    "children": [
      {
        "name": "d3.path - create a new path serializer.",
        "value": 2156
      },
      {
        "name": "path.moveTo - move to the given point.",
        "value": 2156
      },
      {
        "name": "path.closePath - close the current subpath.",
        "value": 2156
      },
      {
        "name": "path.lineTo - draw a straight line segment.",
        "value": 2156
      },
      {
        "name": "path.quadraticCurveTo - draw a quadratic Bézier segment.",
        "value": 2156
      },
      {
        "name": "path.bezierCurveTo - draw a cubic Bézier segment.",
        "value": 2156
      },
      {
        "name": "path.arcTo - draw a circular arc segment.",
        "value": 2156
      },
      {
        "name": "path.arc - draw a circular arc segment.",
        "value": 2156
      },
      {
        "name": "path.rect - draw a rectangle.",
        "value": 2156
      },
      {
        "name": "path.toString - serialize to an SVG path data string.",
        "value": 2156
      }
    ]
  },
  {
    "title": "Queue",
    "repo": "d3-queue",
    "url": "https://d3js.org/d3-queue.v3.min.js",
    "items": [],
    "name": "d3-queue",
    "size": 2073,
    "children": []
  },
  {
    "title": "Hsv",
    "repo": "d3-hsv",
    "url": "https://d3js.org/d3-hsv.v0.1.min.js",
    "items": [],
    "name": "d3-hsv",
    "size": 2045,
    "children": []
  },
  {
    "title": "Timers",
    "repo": "d3-timer",
    "items": [
      {
        "title": "d3.now - get the current high-resolution time.",
        "subCategory": null
      },
      {
        "title": "d3.timer - schedule a new timer.",
        "subCategory": null
      },
      {
        "title": "timer.restart - reset the timer’s start time and callback.",
        "subCategory": null
      },
      {
        "title": "timer.stop - stop the timer.",
        "subCategory": null
      },
      {
        "title": "d3.timerFlush - immediately execute any eligible timers.",
        "subCategory": null
      },
      {
        "title": "d3.timeout - schedule a timer that stops on its first callback.",
        "subCategory": null
      },
      {
        "title": "d3.interval - schedule a timer that is called with a configurable period.",
        "subCategory": null
      }
    ],
    "name": "d3-timer",
    "size": 1825,
    "children": [
      {
        "name": "d3.now - get the current high-resolution time.",
        "value": 1825
      },
      {
        "name": "d3.timer - schedule a new timer.",
        "value": 1825
      },
      {
        "name": "timer.restart - reset the timer’s start time and callback.",
        "value": 1825
      },
      {
        "name": "timer.stop - stop the timer.",
        "value": 1825
      },
      {
        "name": "d3.timerFlush - immediately execute any eligible timers.",
        "value": 1825
      },
      {
        "name": "d3.timeout - schedule a timer that stops on its first callback.",
        "value": 1825
      },
      {
        "name": "d3.interval - schedule a timer that is called with a configurable period.",
        "value": 1825
      }
    ]
  },
  {
    "title": "Dispatches",
    "repo": "d3-dispatch",
    "items": [
      {
        "title": "d3.dispatch - create a custom event dispatcher.",
        "subCategory": null
      },
      {
        "title": "dispatch.on - register or unregister an event listener.",
        "subCategory": null
      },
      {
        "title": "dispatch.copy - create a copy of a dispatcher.",
        "subCategory": null
      },
      {
        "title": "dispatch.call - dispatch an event to registered listeners.",
        "subCategory": null
      },
      {
        "title": "dispatch.apply - dispatch an event to registered listeners.",
        "subCategory": null
      }
    ],
    "name": "d3-dispatch",
    "size": 1809,
    "children": [
      {
        "name": "d3.dispatch - create a custom event dispatcher.",
        "value": 1809
      },
      {
        "name": "dispatch.on - register or unregister an event listener.",
        "value": 1809
      },
      {
        "name": "dispatch.copy - create a copy of a dispatcher.",
        "value": 1809
      },
      {
        "name": "dispatch.call - dispatch an event to registered listeners.",
        "value": 1809
      },
      {
        "name": "dispatch.apply - dispatch an event to registered listeners.",
        "value": 1809
      }
    ]
  },
  {
    "title": "Hexbin",
    "repo": "d3-hexbin",
    "url": "https://d3js.org/d3-hexbin.v0.2.min.js",
    "items": [],
    "name": "d3-hexbin",
    "size": 1706,
    "children": []
  },
  {
    "title": "Polygons",
    "repo": "d3-polygon",
    "items": [
      {
        "title": "d3.polygonArea - compute the area of the given polygon.",
        "subCategory": null
      },
      {
        "title": "d3.polygonCentroid - compute the centroid of the given polygon.",
        "subCategory": null
      },
      {
        "title": "d3.polygonHull - compute the convex hull of the given points.",
        "subCategory": null
      },
      {
        "title": "d3.polygonContains - test whether a point is inside a polygon.",
        "subCategory": null
      },
      {
        "title": "d3.polygonLength - compute the length of the given polygon’s perimeter.",
        "subCategory": null
      }
    ],
    "name": "d3-polygon",
    "size": 1545,
    "children": [
      {
        "name": "d3.polygonArea - compute the area of the given polygon.",
        "value": 1545
      },
      {
        "name": "d3.polygonCentroid - compute the centroid of the given polygon.",
        "value": 1545
      },
      {
        "name": "d3.polygonHull - compute the convex hull of the given points.",
        "value": 1545
      },
      {
        "name": "d3.polygonContains - test whether a point is inside a polygon.",
        "value": 1545
      },
      {
        "name": "d3.polygonLength - compute the length of the given polygon’s perimeter.",
        "value": 1545
      }
    ]
  }
]
